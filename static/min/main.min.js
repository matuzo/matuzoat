!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){n(3),e.exports=n(2)},function(e,t,n){!function(){"use strict";"undefined"!=typeof document&&function(e){var t;function n(){t||(t=!0,e())}["interactive","complete"].indexOf(document.readyState)>=0?e():(t=!1,document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1))}(function(){var e=!0,t=!1,n=null,o={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function i(e){return!!(e&&e!==document&&"HTML"!==e.nodeName&&"BODY"!==e.nodeName&&"classList"in e&&"contains"in e.classList)}function s(e){e.classList.contains("focus-visible")||(e.classList.add("focus-visible"),e.setAttribute("data-focus-visible-added",""))}function r(t){e=!1}function a(){document.addEventListener("mousemove",c),document.addEventListener("mousedown",c),document.addEventListener("mouseup",c),document.addEventListener("pointermove",c),document.addEventListener("pointerdown",c),document.addEventListener("pointerup",c),document.addEventListener("touchmove",c),document.addEventListener("touchstart",c),document.addEventListener("touchend",c)}function c(t){"html"!==t.target.nodeName.toLowerCase()&&(e=!1,document.removeEventListener("mousemove",c),document.removeEventListener("mousedown",c),document.removeEventListener("mouseup",c),document.removeEventListener("pointermove",c),document.removeEventListener("pointerdown",c),document.removeEventListener("pointerup",c),document.removeEventListener("touchmove",c),document.removeEventListener("touchstart",c),document.removeEventListener("touchend",c))}document.addEventListener("keydown",function(t){i(document.activeElement)&&s(document.activeElement),e=!0},!0),document.addEventListener("mousedown",r,!0),document.addEventListener("pointerdown",r,!0),document.addEventListener("touchstart",r,!0),document.addEventListener("focus",function(t){var n,r,a;i(t.target)&&((e||(n=t.target,r=n.type,"INPUT"==(a=n.tagName)&&o[r]&&!n.readOnly||"TEXTAREA"==a&&!n.readOnly||n.isContentEditable))&&s(t.target))},!0),document.addEventListener("blur",function(e){var o;i(e.target)&&((e.target.classList.contains("focus-visible")||e.target.hasAttribute("data-focus-visible-added"))&&(t=!0,window.clearTimeout(n),n=window.setTimeout(function(){t=!1,window.clearTimeout(n)},100),(o=e.target).hasAttribute("data-focus-visible-added")&&(o.classList.remove("focus-visible"),o.removeAttribute("data-focus-visible-added"))))},!0),document.addEventListener("visibilitychange",function(n){"hidden"==document.visibilityState&&(t&&(e=!0),a())},!0),a(),document.body.classList.add("js-focus-visible")})}()},function(e,t,n){},function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}n.r(t);var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=t,this.canvas=document.querySelector(t.canvas),this.canvas&&(this.context=this.canvas.getContext("2d"),this.color="red",this.size=this.prop_set(t.size,20),this.num_x=t.num_x,this.num_y=t.num_y,this.init_canvas())}var t,n,i;return t=e,(n=[{key:"init_canvas",value:function(){if(this.prepare_canvas(),this.attach_events(),this.options.pattern&&this.parse_pattern(),this.options.fill){for(var e=Math.round(this.get_parent_width()/this.size/2),t=0;t<e;t++)this.squares.push({x:this.size*(2*t),y:0});this.draw_squares()}}},{key:"attach_events",value:function(){this.place_square=this.place_square.bind(this),this.canvas.addEventListener("click",this.place_square)}},{key:"place_square",value:function(e){this.context.clearRect(0,0,this.canvas.width,this.canvas.height);var t=e.pageX-e.target.offsetLeft,n=e.pageY-e.target.offsetTop,o=t-t%this.size,i=n-n%this.size;i===this.canvas.height&&(i-=this.size),o===this.canvas.width&&(o-=this.size);var s=this.squares.findIndex(function(e){return e.x===o&e.y===i});s>-1?this.squares.splice(s,1):this.squares.push({x:o,y:i}),this.draw_squares(this.context,this.squares)}},{key:"prop_set",value:function(e,t){return e||t}},{key:"prepare_canvas",value:function(){this.canvas.classList.add("square-canvas--visible"),this.canvas.width=this.num_x*this.size,this.canvas.height=this.num_y*this.size,"infinite"===this.num_x&&(this.canvas.width=this.get_parent_width()),this.squares=[]}},{key:"get_parent_width",value:function(){var e=getComputedStyle(this.canvas.parentNode),t=this.canvas.parentNode.clientWidth;return t-=parseFloat(e.paddingLeft)+parseFloat(e.paddingRight)}},{key:"parse_pattern",value:function(){for(var e=this.options.pattern.split(","),t=0;t<e.length;t++){var n=parseInt(e[t].trim()),o=Math.floor(t/this.num_x),i=(t+this.num_x)%this.num_x;"infinite"===this.num_x&&(o=0,i=t),n&&this.squares.push({x:this.size*i,y:this.size*o})}this.draw_squares()}},{key:"draw_squares",value:function(){this.context.fillStyle=this.prop_set(this.options.color,"rgba(51, 51, 51, 0.9)");for(var e=0;e<this.squares.length;e++){var t=this.squares[e];this.context.fillRect(t.x,t.y,this.size,this.size)}}}])&&o(t.prototype,n),i&&o(t,i),e}(),s=s||function(e){var t=Date.now();return setTimeout(function(){e({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-t))}})},1)},r=s;var a,c=function(){navigator.connection&&(navigator.connection.effectiveType.includes("2g")||navigator.connection.saveData)||r(function(){!function(){for(var e,t,n=document.querySelectorAll(".js-nav-main a"),o=0;o<n.length;o++)e=n[o].href,t=void 0,((t=document.createElement("link")).relList||{}).supports&&!t.relList.supports("prefetch")||(t.rel="prefetch",t.href=e,document.head.appendChild(t))}()})};function u(e){var t,n=e.dataset.src;return(t=n,new Promise(function(e,n){var o=new Image;o.src=t,o.onload=e,o.onerror=n})).then(function(){e.classList.add("lazyloaded"),e.src=n,e.removeAttribute("data-src")})}function d(e){for(var t=0;t<e.length;t++){var n=e[t];n.intersectionRatio>0&&(a.unobserve(n.target),u(n.target))}}var l=function(e){if(e.length){a=new IntersectionObserver(d,{rootMargin:"100px 0px"});for(var t=0;t<e.length;t++){var n=e[t];n.classList.contains("lazyloaded")||a.observe(n)}}};n(1),Element.prototype.closest||(Element.prototype.closest=function(e){var t=this;if(!document.documentElement.contains(t))return null;do{if(t.matches(e))return t;t=t.parentElement||t.parentNode}while(null!==t&&1===t.nodeType);return null});var m;new i({canvas:".js-sq-tl",num_x:1,num_y:1,pattern:"1",color:"#36B1BF"}),new i({canvas:".js-sq-tr",num_x:2,num_y:1,pattern:"1,1",color:"#36B1BF"}),new i({canvas:".js-sq-br",num_x:1,num_y:2,pattern:"1,1",color:"#F23C50"}),new i({canvas:".js-sq-bl",num_x:2,num_y:2,pattern:"1,0,1,1",color:"#F23C50"}),new i({canvas:".js-sq-home-intro",num_x:6,num_y:5,color:"#568b8e",size:10,pattern:"0,0,1,1,0,1,\n    0,1,1,0,0,1,\n    1,1,0,0,0,1,\n    0,1,1,0,0,0,\n    0,0,1,1,0,1"}),new i({canvas:".js-sq-site-header",num_x:"infinite",num_y:1,size:5,color:"#1d4e6d",fill:"even"});function v(){event.preventDefault();var e=event.target.closest("a"),t="".concat(e.dataset.publication,"-").concat(e.dataset.post);document.documentElement.setAttribute("data-theme",t),history.pushState({theme:t},e.href,e.href),h(e.href)}function h(e){var t=document.querySelector(".js-site-content");t.innerHTML="",t.classList.add("site__content--hidden");var n=new XMLHttpRequest;n.open("GET",e,!0),n.onload=function(){var e=document.createElement("div");200===this.status&&(e.innerHTML=this.response,t.innerHTML=e.querySelector(".js-site-content").innerHTML,t.classList.remove("site__content--hidden"),t.querySelector(".js-post-list")&&t.querySelector(".js-post-list").addEventListener("click",v),l(t.querySelectorAll("img[data-src]")))},n.onerror=function(){page_content.innerHTML="For some reason I couldn't connect to the server, please try later again."},n.send()}document.querySelector(".js-random-emoji")&&(document.querySelector(".js-random-emoji").textContent=(m=["🤤","🐳","🍻","👊🏻","🍳"])[Math.round(Math.random()*(m.length-1))]),document.querySelector(".js-scroll-top")&&document.querySelector(".js-scroll-top").addEventListener("click",function(e){e.preventDefault(),document.querySelector(".js-logo").focus()}),c(),history.pushState({theme:location.pathname.replace(/\//g,"")},location.pathname,location.pathname),document.querySelector(".js-post-list")&&document.querySelector(".js-post-list").addEventListener("click",v),window.onpopstate=function(e){e.state&&(document.documentElement.setAttribute("data-theme",e.state.theme),h(location.pathname))},l(document.querySelectorAll("img[data-src]"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,