!function(t){var e={};function n(i){if(e[i])return e[i].exports;var s=e[i]={i:i,l:!1,exports:{}};return t[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)n.d(i,s,function(e){return t[e]}.bind(null,s));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){n(2),t.exports=n(1)},function(t,e){},function(t,e,n){"use strict";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}n.r(e);var s=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.options=e,this.canvas=document.querySelector(e.canvas),this.canvas&&(this.context=this.canvas.getContext("2d"),this.color="red",this.size=this.prop_set(e.size,20),this.num_x=e.num_x,this.num_y=e.num_y,this.init_canvas())}var e,n,s;return e=t,(n=[{key:"init_canvas",value:function(){if(this.prepare_canvas(),this.attach_events(),this.options.pattern&&this.parse_pattern(),this.options.fill){for(var t=Math.round(this.get_parent_width()/this.size/2),e=0;e<t;e++)this.squares.push({x:this.size*(2*e),y:0});this.draw_squares()}}},{key:"attach_events",value:function(){this.place_square=this.place_square.bind(this),this.canvas.addEventListener("click",this.place_square)}},{key:"place_square",value:function(t){this.context.clearRect(0,0,this.canvas.width,this.canvas.height);var e=t.pageX-t.target.offsetLeft,n=t.pageY-t.target.offsetTop,i=e-e%this.size,s=n-n%this.size;s===this.canvas.height&&(s-=this.size),i===this.canvas.width&&(i-=this.size);var r=this.squares.findIndex(function(t){return t.x===i&t.y===s});r>-1?this.squares.splice(r,1):this.squares.push({x:i,y:s}),this.draw_squares(this.context,this.squares)}},{key:"prop_set",value:function(t,e){return t||e}},{key:"prepare_canvas",value:function(){this.canvas.removeAttribute("hidden"),this.canvas.width=this.num_x*this.size,this.canvas.height=this.num_y*this.size,"infinite"===this.num_x&&(this.canvas.width=this.get_parent_width()),this.squares=[]}},{key:"get_parent_width",value:function(){var t=getComputedStyle(this.canvas.parentNode),e=this.canvas.parentNode.clientWidth;return e-=parseFloat(t.paddingLeft)+parseFloat(t.paddingRight)}},{key:"parse_pattern",value:function(){for(var t=this.options.pattern.split(","),e=0;e<t.length;e++){var n=parseInt(t[e].trim()),i=Math.floor(e/this.num_x),s=(e+this.num_x)%this.num_x;"infinite"===this.num_x&&(i=0,s=e),n&&this.squares.push({x:this.size*s,y:this.size*i})}this.draw_squares()}},{key:"draw_squares",value:function(){this.context.fillStyle=this.prop_set(this.options.color,"rgba(51, 51, 51, 0.9)");for(var t=0;t<this.squares.length;t++){var e=this.squares[t];this.context.fillRect(e.x,e.y,this.size,this.size)}}}])&&i(e.prototype,n),s&&i(e,s),t}(),r=r||function(t){var e=Date.now();return setTimeout(function(){t({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-e))}})},1)},a=r;var o,u=function(){navigator.connection.effectiveType.includes("2g")||navigator.connection.saveData||a(function(){!function(){for(var t,e,n=document.querySelectorAll(".js-nav-main a"),i=0;i<n.length;i++)t=n[i].href,e=void 0,((e=document.createElement("link")).relList||{}).supports&&!e.relList.supports("prefetch")||(e.rel="prefetch",e.href=t,document.head.appendChild(e))}()})};new s({canvas:".js-sq-tl",num_x:1,num_y:1,pattern:"1",color:"#36B1BF"}),new s({canvas:".js-sq-tr",num_x:2,num_y:1,pattern:"1,1",color:"#36B1BF"}),new s({canvas:".js-sq-br",num_x:1,num_y:2,pattern:"1,1",color:"#F23C50"}),new s({canvas:".js-sq-bl",num_x:2,num_y:2,pattern:"1,0,1,1",color:"#F23C50"}),new s({canvas:".js-sq-home-intro",num_x:6,num_y:5,color:"#568b8e",size:10,pattern:"0,0,1,1,0,1,\n    0,1,1,0,0,1,\n    1,1,0,0,0,1,\n    0,1,1,0,0,0,\n    0,0,1,1,0,1"}),new s({canvas:".js-sq-site-header",num_x:"infinite",num_y:1,size:5,color:"#1d4e6d",fill:"even"});document.querySelector(".js-random-emoji")&&(document.querySelector(".js-random-emoji").textContent=(o=["🤤","🐳","🍻","👊🏻","🍳"])[Math.round(Math.random()*(o.length-1))]),document.querySelector(".js-scroll-top")&&document.querySelector(".js-scroll-top").addEventListener("click",function(t){t.preventDefault(),document.getElementById("top").scrollIntoView({behavior:"smooth",block:"center"})}),u()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,