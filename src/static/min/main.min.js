!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){n(3),e.exports=n(2)},function(e,t,n){!function(){"use strict";"undefined"!=typeof document&&function(e){var t;function n(){t||(t=!0,e())}["interactive","complete"].indexOf(document.readyState)>=0?e():(t=!1,document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1))}(function(){var e=!0,t=!1,n=null,o={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function i(e){return!!(e&&e!==document&&"HTML"!==e.nodeName&&"BODY"!==e.nodeName&&"classList"in e&&"contains"in e.classList)}function s(e){e.classList.contains("focus-visible")||(e.classList.add("focus-visible"),e.setAttribute("data-focus-visible-added",""))}function a(t){e=!1}function r(){document.addEventListener("mousemove",c),document.addEventListener("mousedown",c),document.addEventListener("mouseup",c),document.addEventListener("pointermove",c),document.addEventListener("pointerdown",c),document.addEventListener("pointerup",c),document.addEventListener("touchmove",c),document.addEventListener("touchstart",c),document.addEventListener("touchend",c)}function c(t){"html"!==t.target.nodeName.toLowerCase()&&(e=!1,document.removeEventListener("mousemove",c),document.removeEventListener("mousedown",c),document.removeEventListener("mouseup",c),document.removeEventListener("pointermove",c),document.removeEventListener("pointerdown",c),document.removeEventListener("pointerup",c),document.removeEventListener("touchmove",c),document.removeEventListener("touchstart",c),document.removeEventListener("touchend",c))}document.addEventListener("keydown",function(t){i(document.activeElement)&&s(document.activeElement),e=!0},!0),document.addEventListener("mousedown",a,!0),document.addEventListener("pointerdown",a,!0),document.addEventListener("touchstart",a,!0),document.addEventListener("focus",function(t){var n,a,r;i(t.target)&&((e||(n=t.target,a=n.type,"INPUT"==(r=n.tagName)&&o[a]&&!n.readOnly||"TEXTAREA"==r&&!n.readOnly||n.isContentEditable))&&s(t.target))},!0),document.addEventListener("blur",function(e){var o;i(e.target)&&((e.target.classList.contains("focus-visible")||e.target.hasAttribute("data-focus-visible-added"))&&(t=!0,window.clearTimeout(n),n=window.setTimeout(function(){t=!1,window.clearTimeout(n)},100),(o=e.target).hasAttribute("data-focus-visible-added")&&(o.classList.remove("focus-visible"),o.removeAttribute("data-focus-visible-added"))))},!0),document.addEventListener("visibilitychange",function(n){"hidden"==document.visibilityState&&(t&&(e=!0),r())},!0),r(),document.body.classList.add("js-focus-visible")})}()},function(e,t,n){},function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}n.r(t);var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=t,this.canvas=document.querySelector(t.canvas),this.canvas&&(this.context=this.canvas.getContext("2d"),this.color="red",this.size=this.prop_set(t.size,20),this.num_x=t.num_x,this.num_y=t.num_y,this.init_canvas())}var t,n,i;return t=e,(n=[{key:"init_canvas",value:function(){if(this.prepare_canvas(),this.attach_events(),this.options.pattern&&this.parse_pattern(),this.options.fill){for(var e=Math.round(this.get_parent_width()/this.size/2),t=0;t<e;t++)this.squares.push({x:this.size*(2*t),y:0});this.draw_squares()}}},{key:"attach_events",value:function(){this.place_square=this.place_square.bind(this),this.canvas.addEventListener("click",this.place_square)}},{key:"place_square",value:function(e){this.context.clearRect(0,0,this.canvas.width,this.canvas.height);var t=e.pageX-e.target.offsetLeft,n=e.pageY-e.target.offsetTop,o=t-t%this.size,i=n-n%this.size;i===this.canvas.height&&(i-=this.size),o===this.canvas.width&&(o-=this.size);var s=this.squares.findIndex(function(e){return e.x===o&e.y===i});s>-1?this.squares.splice(s,1):this.squares.push({x:o,y:i}),this.draw_squares(this.context,this.squares)}},{key:"prop_set",value:function(e,t){return e||t}},{key:"prepare_canvas",value:function(){this.canvas.classList.add("square-canvas--visible"),this.canvas.width=this.num_x*this.size,this.canvas.height=this.num_y*this.size,"infinite"===this.num_x&&(this.canvas.width=this.get_parent_width()),this.squares=[]}},{key:"get_parent_width",value:function(){var e=getComputedStyle(this.canvas.parentNode),t=this.canvas.parentNode.clientWidth;return t-=parseFloat(e.paddingLeft)+parseFloat(e.paddingRight)}},{key:"parse_pattern",value:function(){for(var e=this.options.pattern.split(","),t=0;t<e.length;t++){var n=parseInt(e[t].trim()),o=Math.floor(t/this.num_x),i=(t+this.num_x)%this.num_x;"infinite"===this.num_x&&(o=0,i=t),n&&this.squares.push({x:this.size*i,y:this.size*o})}this.draw_squares()}},{key:"draw_squares",value:function(){this.context.fillStyle=this.prop_set(this.options.color,"rgba(51, 51, 51, 0.9)");for(var e=0;e<this.squares.length;e++){var t=this.squares[e];this.context.fillRect(t.x,t.y,this.size,this.size)}}}])&&o(t.prototype,n),i&&o(t,i),e}(),s=s||function(e){var t=Date.now();return setTimeout(function(){e({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-t))}})},1)},a=s;var r,c=function(){navigator.connection&&navigator.connection.saveData&&(navigator.connection.effectiveType.includes("2g")||navigator.connection.saveData)||a(function(){!function(){for(var e,t,n=document.querySelectorAll(".js-nav-main a"),o=0;o<n.length;o++)e=n[o].href,t=void 0,((t=document.createElement("link")).relList||{}).supports&&!t.relList.supports("prefetch")||(t.rel="prefetch",t.href=e,document.head.appendChild(t))}()})};function u(e){var t,n=e.dataset.src;return(t=n,new Promise(function(e,n){var o=new Image;o.src=t,o.onload=e,o.onerror=n})).then(function(){e.classList.add("lazyloaded"),e.src=n,e.removeAttribute("data-src")})}function d(e){for(var t=0;t<e.length;t++){var n=e[t];n.intersectionRatio>0&&(r.unobserve(n.target),u(n.target))}}var l=function(e){if(e.length){r=new IntersectionObserver(d,{rootMargin:"100px 0px"});for(var t=0;t<e.length;t++){var n=e[t];n.classList.contains("lazyloaded")||r.observe(n)}}};n(1),Element.prototype.closest||(Element.prototype.closest=function(e){var t=this;if(!document.documentElement.contains(t))return null;do{if(t.matches(e))return t;t=t.parentElement||t.parentNode}while(null!==t&&1===t.nodeType);return null});var m;new i({canvas:".js-sq-tl",num_x:1,num_y:1,pattern:"1",color:"#36B1BF"}),new i({canvas:".js-sq-tr",num_x:2,num_y:1,pattern:"1,1",color:"#36B1BF"}),new i({canvas:".js-sq-br",num_x:1,num_y:2,pattern:"1,1",color:"#F23C50"}),new i({canvas:".js-sq-bl",num_x:2,num_y:2,pattern:"1,0,1,1",color:"#F23C50"}),new i({canvas:".js-sq-home-intro",num_x:6,num_y:5,color:"#568b8e",size:10,pattern:"0,0,1,1,0,1,\n    0,1,1,0,0,1,\n    1,1,0,0,0,1,\n    0,1,1,0,0,0,\n    0,0,1,1,0,1"}),new i({canvas:".js-sq-site-header",num_x:"infinite",num_y:1,size:5,color:"#1d4e6d",fill:"even"});function v(){event.preventDefault();var e=event.target.closest("a"),t="".concat(e.dataset.publication,"-").concat(e.dataset.post);document.documentElement.setAttribute("data-theme",t),history.pushState({theme:t},e.href,e.href),h(e.href)}function h(e){var t=document.querySelector(".js-site-content");t.innerHTML="",t.classList.add("site__content--hidden");var n=new XMLHttpRequest;n.open("GET",e,!0),n.onload=function(){var e=document.createElement("div");200===this.status&&(e.innerHTML=this.response,t.innerHTML=e.querySelector(".js-site-content").innerHTML,t.classList.remove("site__content--hidden"),t.querySelector(".js-post-list")&&t.querySelector(".js-post-list").addEventListener("click",v),l(t.querySelectorAll("img[data-src]")))},n.onerror=function(){page_content.innerHTML="For some reason I couldn't connect to the server, please try later again."},n.send()}document.querySelector(".js-random-emoji")&&(document.querySelector(".js-random-emoji").textContent=(m=["🤤","🐳","🍻","👊🏻","🍳"])[Math.round(Math.random()*(m.length-1))]),document.querySelector(".js-scroll-top")&&document.querySelector(".js-scroll-top").addEventListener("click",function(e){e.preventDefault(),document.querySelector(".js-logo").focus()}),c(),history.pushState({theme:location.pathname.replace(/\//g,"")},location.pathname,location.pathname),document.querySelector(".js-post-list")&&document.querySelector(".js-post-list").addEventListener("click",v),window.onpopstate=function(e){e.state&&(document.documentElement.setAttribute("data-theme",e.state.theme),h(location.pathname))},l(document.querySelectorAll("img[data-src]"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZvY3VzLXZpc2libGUvZGlzdC9mb2N1cy12aXNpYmxlLmpzIiwid2VicGFjazovLy8uL3NyYy9zdGF0aWMvc2NyaXB0cy9zcXVhcmVzLmpzIiwid2VicGFjazovLy8uL3NyYy9zdGF0aWMvc2NyaXB0cy9yZXF1ZXN0LWlkbGUtY2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXRpYy9zY3JpcHRzL3ByZWZldGNoLW5hdi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGljL3NjcmlwdHMvbGF6eWxvYWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXRpYy9zY3JpcHRzL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZG9jdW1lbnQiLCJjYWxsYmFjayIsImxvYWRlZCIsImxvYWQiLCJpbmRleE9mIiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3aW5kb3ciLCJvbkRPTVJlYWR5IiwiaGFkS2V5Ym9hcmRFdmVudCIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0IiwiaW5wdXRUeXBlc1doaXRlbGlzdCIsInRleHQiLCJzZWFyY2giLCJ1cmwiLCJ0ZWwiLCJlbWFpbCIsInBhc3N3b3JkIiwibnVtYmVyIiwiZGF0ZSIsIm1vbnRoIiwid2VlayIsInRpbWUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiaXNWYWxpZEZvY3VzVGFyZ2V0IiwiZWwiLCJub2RlTmFtZSIsImNsYXNzTGlzdCIsImFkZEZvY3VzVmlzaWJsZUNsYXNzIiwiY29udGFpbnMiLCJhZGQiLCJzZXRBdHRyaWJ1dGUiLCJvblBvaW50ZXJEb3duIiwiZSIsImFkZEluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycyIsIm9uSW5pdGlhbFBvaW50ZXJNb3ZlIiwidGFyZ2V0IiwidG9Mb3dlckNhc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWN0aXZlRWxlbWVudCIsInR5cGUiLCJ0YWdOYW1lIiwicmVhZE9ubHkiLCJpc0NvbnRlbnRFZGl0YWJsZSIsImhhc0F0dHJpYnV0ZSIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJyZW1vdmUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ2aXNpYmlsaXR5U3RhdGUiLCJib2R5IiwiZmFjdG9yeSIsIlNxdWFyZXMiLCJvcHRpb25zIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsImNhbnZhcyIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsImNvbG9yIiwic2l6ZSIsInByb3Bfc2V0IiwibnVtX3giLCJudW1feSIsImluaXRfY2FudmFzIiwicHJlcGFyZV9jYW52YXMiLCJhdHRhY2hfZXZlbnRzIiwicGF0dGVybiIsInBhcnNlX3BhdHRlcm4iLCJmaWxsIiwibnVtX2JveGVzIiwiTWF0aCIsInJvdW5kIiwiZ2V0X3BhcmVudF93aWR0aCIsInNxdWFyZXMiLCJwdXNoIiwieCIsInkiLCJkcmF3X3NxdWFyZXMiLCJwbGFjZV9zcXVhcmUiLCJjbGVhclJlY3QiLCJ3aWR0aCIsImhlaWdodCIsInhfcmF3IiwicGFnZVgiLCJvZmZzZXRMZWZ0IiwieV9yYXciLCJwYWdlWSIsIm9mZnNldFRvcCIsImluZGV4IiwiZmluZEluZGV4IiwicG9zIiwic3BsaWNlIiwicHJvcCIsInBhcmVudF9zdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwicGFyZW50Tm9kZSIsInBhcmVudF93aWR0aCIsImNsaWVudFdpZHRoIiwicGFyc2VGbG9hdCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0Iiwic3BsaXQiLCJsZW5ndGgiLCJib3giLCJwYXJzZUludCIsInRyaW0iLCJyb3ciLCJmbG9vciIsImNvbCIsImZpbGxTdHlsZSIsInNxdWFyZSIsImZpbGxSZWN0IiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNiIiwic3RhcnQiLCJEYXRlIiwibm93IiwiZGlkVGltZW91dCIsInRpbWVSZW1haW5pbmciLCJtYXgiLCJwcmVmZXRjaE5hdiIsIm9ic2VydmVyIiwibmF2aWdhdG9yIiwiY29ubmVjdGlvbiIsInNhdmVEYXRhIiwiZWZmZWN0aXZlVHlwZSIsImluY2x1ZGVzIiwibGluayIsImxpbmtzIiwicXVlcnlTZWxlY3RvckFsbCIsImhyZWYiLCJjcmVhdGVFbGVtZW50IiwicmVsTGlzdCIsInN1cHBvcnRzIiwicmVsIiwiaGVhZCIsImFwcGVuZENoaWxkIiwiZ2V0TGlua3MiLCJsb2FkSW1hZ2UiLCJpbWFnZSIsInNyYyIsImRhdGFzZXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIkltYWdlIiwib25sb2FkIiwib25lcnJvciIsInRoZW4iLCJpbWFnZVZpc2libGUiLCJlbnRyaWVzIiwiZW50cnkiLCJpbnRlcnNlY3Rpb25SYXRpbyIsInVub2JzZXJ2ZSIsImxhenlMb2FkIiwiaW1hZ2VzIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJyb290TWFyZ2luIiwib2JzZXJ2ZSIsInJlcXVpcmUiLCJFbGVtZW50IiwiY2xvc2VzdCIsImRvY3VtZW50RWxlbWVudCIsIm1hdGNoZXMiLCJwYXJlbnRFbGVtZW50Iiwibm9kZVR5cGUiLCJlbW9qaXMiLCJsaW5rUG9zdGxpc3QiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwidGhlbWVDbGFzcyIsImNvbmNhdCIsInB1YmxpY2F0aW9uIiwicG9zdCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJ0aGVtZSIsImxvYWRQYWdlIiwibWFpbiIsImlubmVySFRNTCIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJjb250YWluZXIiLCJzdGF0dXMiLCJyZXNwb25zZSIsInBhZ2VfY29udGVudCIsInNlbmQiLCJ0ZXh0Q29udGVudCIsInJhbmRvbSIsImZvY3VzIiwibG9jYXRpb24iLCJwYXRobmFtZSIsInJlcGxhY2UiLCJvbnBvcHN0YXRlIiwic3RhdGUiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxZQUFBLENBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJB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QUFRakMsUUFBVSxXQUNoQnVDLGFBQWFQLFVBQ1gsNkVBR0pDLEVBQVFPLE9BaEZOL0wsU0FBUzJELGNBQWMsc0JBQ3pCM0QsU0FBUzJELGNBQWMsb0JBQW9CcUksYUFQckN0QixFQUFTLENBQUMsS0FBTSxLQUFNLEtBQU0sT0FBUSxPQUVyQmhHLEtBQUtDLE1BQU1ELEtBQUt1SCxVQUFZdkIsRUFBT2hFLE9BQVMsTUFZL0QxRyxTQUFTMkQsY0FBYyxtQkFDekIzRCxTQUFTMkQsY0FBYyxrQkFBa0JyRCxpQkFBaUIsUUFBUyxTQUFBNkIsR0FDakVBLEVBQUUwSSxpQkFDRjdLLFNBQVMyRCxjQUFjLFlBQVl1SSxVQVF2Q3RFLElBRUFzRCxRQUFRQyxVQUNOLENBQUVDLE1BQU9lLFNBQVNDLFNBQVNDLFFBQVEsTUFBTyxLQUMxQ0YsU0FBU0MsU0FDVEQsU0FBU0MsVUFZUHBNLFNBQVMyRCxjQUFjLGtCQUN6QjNELFNBQ0cyRCxjQUFjLGlCQUNkckQsaUJBQWlCLFFBQVNxSyxHQUcvQnBLLE9BQU8rTCxXQUFhLFNBQVNuSyxHQUN2QkEsRUFBRW9LLFFBQ0p2TSxTQUFTc0ssZ0JBQWdCckksYUFBYSxhQUFjRSxFQUFFb0ssTUFBTW5CLE9BQzVEQyxFQUFTYyxTQUFTQyxZQXVDdEJ0QyxFQUFTOUosU0FBU3FJLGlCQUFpQiIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gIChmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGVcbiAgICovXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIHZhciBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xuICAgIHZhciBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSBudWxsO1xuXG4gICAgdmFyIGlucHV0VHlwZXNXaGl0ZWxpc3QgPSB7XG4gICAgICB0ZXh0OiB0cnVlLFxuICAgICAgc2VhcmNoOiB0cnVlLFxuICAgICAgdXJsOiB0cnVlLFxuICAgICAgdGVsOiB0cnVlLFxuICAgICAgZW1haWw6IHRydWUsXG4gICAgICBwYXNzd29yZDogdHJ1ZSxcbiAgICAgIG51bWJlcjogdHJ1ZSxcbiAgICAgIGRhdGU6IHRydWUsXG4gICAgICBtb250aDogdHJ1ZSxcbiAgICAgIHdlZWs6IHRydWUsXG4gICAgICB0aW1lOiB0cnVlLFxuICAgICAgZGF0ZXRpbWU6IHRydWUsXG4gICAgICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgbGVnYWN5IGJyb3dzZXJzIGFuZCBpZnJhbWVzIHdoaWNoIHNvbWV0aW1lcyBmb2N1c1xuICAgICAqIGVsZW1lbnRzIGxpa2UgZG9jdW1lbnQsIGJvZHksIGFuZCBub24taW50ZXJhY3RpdmUgU1ZHLlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1ZhbGlkRm9jdXNUYXJnZXQoZWwpIHtcbiAgICAgIGlmIChcbiAgICAgICAgZWwgJiZcbiAgICAgICAgZWwgIT09IGRvY3VtZW50ICYmXG4gICAgICAgIGVsLm5vZGVOYW1lICE9PSAnSFRNTCcgJiZcbiAgICAgICAgZWwubm9kZU5hbWUgIT09ICdCT0RZJyAmJlxuICAgICAgICAnY2xhc3NMaXN0JyBpbiBlbCAmJlxuICAgICAgICAnY29udGFpbnMnIGluIGVsLmNsYXNzTGlzdFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgdHJpZ2dlciB0aGVcbiAgICAgKiBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgYmVpbmcgYWRkZWQsIGkuZS4gd2hldGhlciBpdCBzaG91bGQgYWx3YXlzIG1hdGNoXG4gICAgICogYDpmb2N1cy12aXNpYmxlYCB3aGVuIGZvY3VzZWQuXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkoZWwpIHtcbiAgICAgIHZhciB0eXBlID0gZWwudHlwZTtcbiAgICAgIHZhciB0YWdOYW1lID0gZWwudGFnTmFtZTtcblxuICAgICAgaWYgKHRhZ05hbWUgPT0gJ0lOUFVUJyAmJiBpbnB1dFR5cGVzV2hpdGVsaXN0W3R5cGVdICYmICFlbC5yZWFkT25seSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRhZ05hbWUgPT0gJ1RFWFRBUkVBJyAmJiAhZWwucmVhZE9ubHkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbC5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgYGZvY3VzLXZpc2libGVgIGNsYXNzIHRvIHRoZSBnaXZlbiBlbGVtZW50IGlmIGl0IHdhcyBub3QgYWRkZWQgYnlcbiAgICAgKiB0aGUgYXV0aG9yLlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRGb2N1c1Zpc2libGVDbGFzcyhlbCkge1xuICAgICAgaWYgKGVsLmNsYXNzTGlzdC5jb250YWlucygnZm9jdXMtdmlzaWJsZScpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzLXZpc2libGUnKTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS1mb2N1cy12aXNpYmxlLWFkZGVkJywgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgYGZvY3VzLXZpc2libGVgIGNsYXNzIGZyb20gdGhlIGdpdmVuIGVsZW1lbnQgaWYgaXQgd2FzIG5vdFxuICAgICAqIG9yaWdpbmFsbHkgYWRkZWQgYnkgdGhlIGF1dGhvci5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlRm9jdXNWaXNpYmxlQ2xhc3MoZWwpIHtcbiAgICAgIGlmICghZWwuaGFzQXR0cmlidXRlKCdkYXRhLWZvY3VzLXZpc2libGUtYWRkZWQnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdmb2N1cy12aXNpYmxlJyk7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMtdmlzaWJsZS1hZGRlZCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyZWF0IGBrZXlkb3duYCBhcyBhIHNpZ25hbCB0aGF0IHRoZSB1c2VyIGlzIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICAgICAqIEFwcGx5IGBmb2N1cy12aXNpYmxlYCB0byBhbnkgY3VycmVudCBhY3RpdmUgZWxlbWVudCBhbmQga2VlcCB0cmFja1xuICAgICAqIG9mIG91ciBrZXlib2FyZCBtb2RhbGl0eSBzdGF0ZSB3aXRoIGBoYWRLZXlib2FyZEV2ZW50YC5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25LZXlEb3duKGUpIHtcbiAgICAgIGlmIChpc1ZhbGlkRm9jdXNUYXJnZXQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgYWRkRm9jdXNWaXNpYmxlQ2xhc3MoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIGF0IGFueSBwb2ludCBhIHVzZXIgY2xpY2tzIHdpdGggYSBwb2ludGluZyBkZXZpY2UsIGVuc3VyZSB0aGF0IHdlIGNoYW5nZVxuICAgICAqIHRoZSBtb2RhbGl0eSBhd2F5IGZyb20ga2V5Ym9hcmQuXG4gICAgICogVGhpcyBhdm9pZHMgdGhlIHNpdHVhdGlvbiB3aGVyZSBhIHVzZXIgcHJlc3NlcyBhIGtleSBvbiBhbiBhbHJlYWR5IGZvY3VzZWRcbiAgICAgKiBlbGVtZW50LCBhbmQgdGhlbiBjbGlja3Mgb24gYSBkaWZmZXJlbnQgZWxlbWVudCwgZm9jdXNpbmcgaXQgd2l0aCBhXG4gICAgICogcG9pbnRpbmcgZGV2aWNlLCB3aGlsZSB3ZSBzdGlsbCB0aGluayB3ZSdyZSBpbiBrZXlib2FyZCBtb2RhbGl0eS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Qb2ludGVyRG93bihlKSB7XG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT24gYGZvY3VzYCwgYWRkIHRoZSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gdGhlIHRhcmdldCBpZjpcbiAgICAgKiAtIHRoZSB0YXJnZXQgcmVjZWl2ZWQgZm9jdXMgYXMgYSByZXN1bHQgb2Yga2V5Ym9hcmQgbmF2aWdhdGlvbiwgb3JcbiAgICAgKiAtIHRoZSBldmVudCB0YXJnZXQgaXMgYW4gZWxlbWVudCB0aGF0IHdpbGwgbGlrZWx5IHJlcXVpcmUgaW50ZXJhY3Rpb25cbiAgICAgKiAgIHZpYSB0aGUga2V5Ym9hcmQgKGUuZy4gYSB0ZXh0IGJveClcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Gb2N1cyhlKSB7XG4gICAgICAvLyBQcmV2ZW50IElFIGZyb20gZm9jdXNpbmcgdGhlIGRvY3VtZW50IG9yIEhUTUwgZWxlbWVudC5cbiAgICAgIGlmICghaXNWYWxpZEZvY3VzVGFyZ2V0KGUudGFyZ2V0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChoYWRLZXlib2FyZEV2ZW50IHx8IGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KGUudGFyZ2V0KSkge1xuICAgICAgICBhZGRGb2N1c1Zpc2libGVDbGFzcyhlLnRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT24gYGJsdXJgLCByZW1vdmUgdGhlIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBmcm9tIHRoZSB0YXJnZXQuXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uQmx1cihlKSB7XG4gICAgICBpZiAoIWlzVmFsaWRGb2N1c1RhcmdldChlLnRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZm9jdXMtdmlzaWJsZScpIHx8XG4gICAgICAgIGUudGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGF0YS1mb2N1cy12aXNpYmxlLWFkZGVkJylcbiAgICAgICkge1xuICAgICAgICAvLyBUbyBkZXRlY3QgYSB0YWIvd2luZG93IHN3aXRjaCwgd2UgbG9vayBmb3IgYSBibHVyIGV2ZW50IGZvbGxvd2VkXG4gICAgICAgIC8vIHJhcGlkbHkgYnkgYSB2aXNpYmlsaXR5IGNoYW5nZS5cbiAgICAgICAgLy8gSWYgd2UgZG9uJ3Qgc2VlIGEgdmlzaWJpbGl0eSBjaGFuZ2Ugd2l0aGluIDEwMG1zLCBpdCdzIHByb2JhYmx5IGFcbiAgICAgICAgLy8gcmVndWxhciBmb2N1cyBjaGFuZ2UuXG4gICAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gdHJ1ZTtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQpO1xuICAgICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xuICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0KTtcbiAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgcmVtb3ZlRm9jdXNWaXNpYmxlQ2xhc3MoZS50YXJnZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIHRoZSB1c2VyIGNoYW5nZXMgdGFicywga2VlcCB0cmFjayBvZiB3aGV0aGVyIG9yIG5vdCB0aGUgcHJldmlvdXNseVxuICAgICAqIGZvY3VzZWQgZWxlbWVudCBoYWQgLmZvY3VzLXZpc2libGUuXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uVmlzaWJpbGl0eUNoYW5nZShlKSB7XG4gICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09ICdoaWRkZW4nKSB7XG4gICAgICAgIC8vIElmIHRoZSB0YWIgYmVjb21lcyBhY3RpdmUgYWdhaW4sIHRoZSBicm93c2VyIHdpbGwgaGFuZGxlIGNhbGxpbmcgZm9jdXNcbiAgICAgICAgLy8gb24gdGhlIGVsZW1lbnQgKFNhZmFyaSBhY3R1YWxseSBjYWxscyBpdCB0d2ljZSkuXG4gICAgICAgIC8vIElmIHRoaXMgdGFiIGNoYW5nZSBjYXVzZWQgYSBibHVyIG9uIGFuIGVsZW1lbnQgd2l0aCBmb2N1cy12aXNpYmxlLFxuICAgICAgICAvLyByZS1hcHBseSB0aGUgY2xhc3Mgd2hlbiB0aGUgdXNlciBzd2l0Y2hlcyBiYWNrIHRvIHRoZSB0YWIuXG4gICAgICAgIGlmIChoYWRGb2N1c1Zpc2libGVSZWNlbnRseSkge1xuICAgICAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGFkZEluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGdyb3VwIG9mIGxpc3RlbmVycyB0byBkZXRlY3QgdXNhZ2Ugb2YgYW55IHBvaW50aW5nIGRldmljZXMuXG4gICAgICogVGhlc2UgbGlzdGVuZXJzIHdpbGwgYmUgYWRkZWQgd2hlbiB0aGUgcG9seWZpbGwgZmlyc3QgbG9hZHMsIGFuZCBhbnl0aW1lXG4gICAgICogdGhlIHdpbmRvdyBpcyBibHVycmVkLCBzbyB0aGF0IHRoZXkgYXJlIGFjdGl2ZSB3aGVuIHRoZSB3aW5kb3cgcmVnYWluc1xuICAgICAqIGZvY3VzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZEluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycygpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycygpIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIHBvbGZ5aWxsIGZpcnN0IGxvYWRzLCBhc3N1bWUgdGhlIHVzZXIgaXMgaW4ga2V5Ym9hcmQgbW9kYWxpdHkuXG4gICAgICogSWYgYW55IGV2ZW50IGlzIHJlY2VpdmVkIGZyb20gYSBwb2ludGluZyBkZXZpY2UgKGUuZy4gbW91c2UsIHBvaW50ZXIsXG4gICAgICogdG91Y2gpLCB0dXJuIG9mZiBrZXlib2FyZCBtb2RhbGl0eS5cbiAgICAgKiBUaGlzIGFjY291bnRzIGZvciBzaXR1YXRpb25zIHdoZXJlIGZvY3VzIGVudGVycyB0aGUgcGFnZSBmcm9tIHRoZSBVUkwgYmFyLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbkluaXRpYWxQb2ludGVyTW92ZShlKSB7XG4gICAgICAvLyBXb3JrIGFyb3VuZCBhIFNhZmFyaSBxdWlyayB0aGF0IGZpcmVzIGEgbW91c2Vtb3ZlIG9uIDxodG1sPiB3aGVuZXZlciB0aGVcbiAgICAgIC8vIHdpbmRvdyBibHVycywgZXZlbiBpZiB5b3UncmUgdGFiYmluZyBvdXQgb2YgdGhlIHBhZ2UuIMKvXFxfKOODhClfL8KvXG4gICAgICBpZiAoZS50YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2h0bWwnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaGFkS2V5Ym9hcmRFdmVudCA9IGZhbHNlO1xuICAgICAgcmVtb3ZlSW5pdGlhbFBvaW50ZXJNb3ZlTGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uS2V5RG93biwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Qb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBvblBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Qb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBvbkZvY3VzLCB0cnVlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgb25CbHVyLCB0cnVlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgb25WaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbiAgICBhZGRJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKTtcblxuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnanMtZm9jdXMtdmlzaWJsZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmlwdGlvbiB3aGVuIHRoZSBET00gaXMgcmVhZHlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIGZ1bmN0aW9uIG9uRE9NUmVhZHkoY2FsbGJhY2spIHtcbiAgICB2YXIgbG9hZGVkO1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgd3JhcHBlciBmb3IgY2hlY2sgbG9hZGVkIHN0YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9hZCgpIHtcbiAgICAgIGlmICghbG9hZGVkKSB7XG4gICAgICAgIGxvYWRlZCA9IHRydWU7XG5cbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoWydpbnRlcmFjdGl2ZScsICdjb21wbGV0ZSddLmluZGV4T2YoZG9jdW1lbnQucmVhZHlTdGF0ZSkgPj0gMCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9hZGVkID0gZmFsc2U7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbG9hZCwgZmFsc2UpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBsb2FkLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvbkRPTVJlYWR5KGluaXQpO1xuICB9XG5cbn0pKSk7XG4iLCJjbGFzcyBTcXVhcmVzIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iob3B0aW9ucy5jYW52YXMpO1xuXG4gICAgaWYgKCF0aGlzLmNhbnZhcykgcmV0dXJuO1xuXG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB0aGlzLmNvbG9yID0gJ3JlZCc7XG5cbiAgICB0aGlzLnNpemUgPSB0aGlzLnByb3Bfc2V0KG9wdGlvbnMuc2l6ZSwgMjApO1xuXG4gICAgdGhpcy5udW1feCA9IG9wdGlvbnMubnVtX3g7XG4gICAgdGhpcy5udW1feSA9IG9wdGlvbnMubnVtX3k7XG5cbiAgICB0aGlzLmluaXRfY2FudmFzKCk7XG4gIH1cblxuICBpbml0X2NhbnZhcygpIHtcbiAgICB0aGlzLnByZXBhcmVfY2FudmFzKCk7XG4gICAgdGhpcy5hdHRhY2hfZXZlbnRzKCk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnBhdHRlcm4pIHtcbiAgICAgIHRoaXMucGFyc2VfcGF0dGVybigpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZmlsbCkge1xuICAgICAgY29uc3QgbnVtX2JveGVzID0gTWF0aC5yb3VuZCh0aGlzLmdldF9wYXJlbnRfd2lkdGgoKSAvIHRoaXMuc2l6ZSAvIDIpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bV9ib3hlczsgaSsrKSB7XG4gICAgICAgIHRoaXMuc3F1YXJlcy5wdXNoKHsgeDogdGhpcy5zaXplICogKDIgKiBpKSwgeTogMCB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5kcmF3X3NxdWFyZXMoKTtcbiAgICB9XG4gIH1cblxuICBhdHRhY2hfZXZlbnRzKCkge1xuICAgIHRoaXMucGxhY2Vfc3F1YXJlID0gdGhpcy5wbGFjZV9zcXVhcmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucGxhY2Vfc3F1YXJlKTtcbiAgfVxuXG4gIHBsYWNlX3NxdWFyZShlKSB7XG4gICAgdGhpcy5jb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcblxuICAgIGNvbnN0IHhfcmF3ID0gZS5wYWdlWCAtIGUudGFyZ2V0Lm9mZnNldExlZnQ7XG4gICAgY29uc3QgeV9yYXcgPSBlLnBhZ2VZIC0gZS50YXJnZXQub2Zmc2V0VG9wO1xuXG4gICAgbGV0IHggPSB4X3JhdyAtICh4X3JhdyAlIHRoaXMuc2l6ZSk7XG4gICAgbGV0IHkgPSB5X3JhdyAtICh5X3JhdyAlIHRoaXMuc2l6ZSk7XG5cbiAgICBpZiAoeSA9PT0gdGhpcy5jYW52YXMuaGVpZ2h0KSB7XG4gICAgICB5IC09IHRoaXMuc2l6ZTtcbiAgICB9XG4gICAgaWYgKHggPT09IHRoaXMuY2FudmFzLndpZHRoKSB7XG4gICAgICB4IC09IHRoaXMuc2l6ZTtcbiAgICB9XG5cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuc3F1YXJlcy5maW5kSW5kZXgocG9zID0+IChwb3MueCA9PT0geCkgJiAocG9zLnkgPT09IHkpKTtcblxuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICB0aGlzLnNxdWFyZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zcXVhcmVzLnB1c2goeyB4OiB4LCB5OiB5IH0pO1xuICAgIH1cblxuICAgIHRoaXMuZHJhd19zcXVhcmVzKHRoaXMuY29udGV4dCwgdGhpcy5zcXVhcmVzKTtcbiAgfVxuXG4gIHByb3Bfc2V0KHByb3AsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHByb3AgPyBwcm9wIDogdmFsdWU7XG4gIH1cblxuICBwcmVwYXJlX2NhbnZhcygpIHtcbiAgICB0aGlzLmNhbnZhcy5jbGFzc0xpc3QuYWRkKCdzcXVhcmUtY2FudmFzLS12aXNpYmxlJyk7XG5cbiAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMubnVtX3ggKiB0aGlzLnNpemU7XG4gICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdGhpcy5udW1feSAqIHRoaXMuc2l6ZTtcblxuICAgIGlmICh0aGlzLm51bV94ID09PSAnaW5maW5pdGUnKSB7XG4gICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMuZ2V0X3BhcmVudF93aWR0aCgpO1xuICAgIH1cblxuICAgIHRoaXMuc3F1YXJlcyA9IFtdO1xuICB9XG5cbiAgZ2V0X3BhcmVudF93aWR0aCgpIHtcbiAgICBjb25zdCBwYXJlbnRfc3R5bGVzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmNhbnZhcy5wYXJlbnROb2RlKTtcbiAgICBsZXQgcGFyZW50X3dpZHRoID0gdGhpcy5jYW52YXMucGFyZW50Tm9kZS5jbGllbnRXaWR0aDtcbiAgICBwYXJlbnRfd2lkdGggLT1cbiAgICAgIHBhcnNlRmxvYXQocGFyZW50X3N0eWxlcy5wYWRkaW5nTGVmdCkgK1xuICAgICAgcGFyc2VGbG9hdChwYXJlbnRfc3R5bGVzLnBhZGRpbmdSaWdodCk7XG5cbiAgICByZXR1cm4gcGFyZW50X3dpZHRoO1xuICB9XG5cbiAgcGFyc2VfcGF0dGVybigpIHtcbiAgICBjb25zdCBwYXR0ZXJuID0gdGhpcy5vcHRpb25zLnBhdHRlcm4uc3BsaXQoJywnKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0dGVybi5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYm94ID0gcGFyc2VJbnQocGF0dGVybltpXS50cmltKCkpO1xuICAgICAgbGV0IHJvdyA9IE1hdGguZmxvb3IoaSAvIHRoaXMubnVtX3gpO1xuICAgICAgbGV0IGNvbCA9IChpICsgdGhpcy5udW1feCkgJSB0aGlzLm51bV94O1xuXG4gICAgICBpZiAodGhpcy5udW1feCA9PT0gJ2luZmluaXRlJykge1xuICAgICAgICByb3cgPSAwO1xuICAgICAgICBjb2wgPSBpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYm94KSB7XG4gICAgICAgIHRoaXMuc3F1YXJlcy5wdXNoKHsgeDogdGhpcy5zaXplICogY29sLCB5OiB0aGlzLnNpemUgKiByb3cgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5kcmF3X3NxdWFyZXMoKTtcbiAgfVxuXG4gIGRyYXdfc3F1YXJlcygpIHtcbiAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5wcm9wX3NldChcbiAgICAgIHRoaXMub3B0aW9ucy5jb2xvcixcbiAgICAgICdyZ2JhKDUxLCA1MSwgNTEsIDAuOSknXG4gICAgKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zcXVhcmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzcXVhcmUgPSB0aGlzLnNxdWFyZXNbaV07XG4gICAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3Qoc3F1YXJlLngsIHNxdWFyZS55LCB0aGlzLnNpemUsIHRoaXMuc2l6ZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNxdWFyZXM7XG4iLCJjb25zdCByZXF1ZXN0SWRsZUNhbGxiYWNrID1cbiAgcmVxdWVzdElkbGVDYWxsYmFjayB8fFxuICBmdW5jdGlvbihjYikge1xuICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGNiKHtcbiAgICAgICAgZGlkVGltZW91dDogZmFsc2UsXG4gICAgICAgIHRpbWVSZW1haW5pbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBNYXRoLm1heCgwLCA1MCAtIChEYXRlLm5vdygpIC0gc3RhcnQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgMSk7XG4gIH07XG5cbmV4cG9ydCBkZWZhdWx0IHJlcXVlc3RJZGxlQ2FsbGJhY2s7XG4iLCIvKipcbiAqIEluc3BpcmVkIGJ5IHF1aWNrbGluay5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Hb29nbGVDaHJvbWVMYWJzL3F1aWNrbGlua1xuICovXG5cbmltcG9ydCByZXF1ZXN0SWRsZUNhbGxiYWNrIGZyb20gJy4vcmVxdWVzdC1pZGxlLWNhbGxiYWNrLmpzJztcblxuZnVuY3Rpb24gY3JlYXRlUHJlZmV0Y2hMaW5rKHVybCkge1xuICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuXG4gIC8vIElmIHByZWZldGNoIHN1cHBvcnRlZFxuICBpZiAoKGxpbmsucmVsTGlzdCB8fCB7fSkuc3VwcG9ydHMgJiYgIWxpbmsucmVsTGlzdC5zdXBwb3J0cygncHJlZmV0Y2gnKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxpbmsucmVsID0gJ3ByZWZldGNoJztcbiAgbGluay5ocmVmID0gdXJsO1xuXG4gIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGluayk7XG59XG5cbmZ1bmN0aW9uIGdldExpbmtzKCkge1xuICAvLyBHZXQgYWxsIGxpbmtzIGluIG1haW4gbmF2XG4gIGNvbnN0IGxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmpzLW5hdi1tYWluIGEnKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgY3JlYXRlUHJlZmV0Y2hMaW5rKGxpbmtzW2ldLmhyZWYpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByZWZldGNoTmF2KCkge1xuICAvLyBkb24ndCBwcmVmZXRjaCBpZiAyZyBjb25uZWN0aW9uIG9yIGRhdGEtc2F2ZXIgZW5hYmxlZFxuICBpZiAobmF2aWdhdG9yLmNvbm5lY3Rpb24gJiYgbmF2aWdhdG9yLmNvbm5lY3Rpb24uc2F2ZURhdGEpIHtcbiAgICBpZiAoXG4gICAgICBuYXZpZ2F0b3IuY29ubmVjdGlvbi5lZmZlY3RpdmVUeXBlLmluY2x1ZGVzKCcyZycpIHx8XG4gICAgICBuYXZpZ2F0b3IuY29ubmVjdGlvbi5zYXZlRGF0YVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIC8vIHN0YXJ0IGFzIHNvb24gYXMgdGhlIGJyb3dzZXIgaXNuJ3QgYnVzeSBhbnltb3JlXG4gIHJlcXVlc3RJZGxlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGdldExpbmtzKCk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBwcmVmZXRjaE5hdjtcbiIsImxldCBvYnNlcnZlcjtcblxuZnVuY3Rpb24gbG9hZEltYWdlKGltYWdlKSB7XG4gIGNvbnN0IHNyYyA9IGltYWdlLmRhdGFzZXQuc3JjO1xuICByZXR1cm4gZmV0Y2hJbWFnZShzcmMpLnRoZW4oKCkgPT4ge1xuICAgIGltYWdlLmNsYXNzTGlzdC5hZGQoJ2xhenlsb2FkZWQnKTtcbiAgICBpbWFnZS5zcmMgPSBzcmM7XG4gICAgaW1hZ2UucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXNyYycpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZmV0Y2hJbWFnZSh1cmwpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgIGltYWdlLnNyYyA9IHVybDtcbiAgICBpbWFnZS5vbmxvYWQgPSByZXNvbHZlO1xuICAgIGltYWdlLm9uZXJyb3IgPSByZWplY3Q7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbWFnZVZpc2libGUoZW50cmllcykge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgZW50cnkgPSBlbnRyaWVzW2ldO1xuICAgIGlmIChlbnRyeS5pbnRlcnNlY3Rpb25SYXRpbyA+IDApIHtcbiAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpO1xuICAgICAgbG9hZEltYWdlKGVudHJ5LnRhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGxhenlMb2FkKGltYWdlcykge1xuICBpZiAoaW1hZ2VzLmxlbmd0aCkge1xuICAgIG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGltYWdlVmlzaWJsZSwge1xuICAgICAgcm9vdE1hcmdpbjogJzEwMHB4IDBweCdcbiAgICB9KTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW1hZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgaW1hZ2UgPSBpbWFnZXNbaV07XG4gICAgICBpZiAoaW1hZ2UuY2xhc3NMaXN0LmNvbnRhaW5zKCdsYXp5bG9hZGVkJykpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIG9ic2VydmVyLm9ic2VydmUoaW1hZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBsYXp5TG9hZDtcbiIsImltcG9ydCBTcXVhcmVzIGZyb20gJy4vc3F1YXJlcyc7XG5pbXBvcnQgcHJlZmV0Y2hOYXYgZnJvbSAnLi9wcmVmZXRjaC1uYXYnO1xuaW1wb3J0IGxhenlMb2FkIGZyb20gJy4vbGF6eWxvYWQnO1xucmVxdWlyZSgnZm9jdXMtdmlzaWJsZScpO1xuXG5pZiAoIUVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QpIHtcbiAgRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCA9IGZ1bmN0aW9uKHMpIHtcbiAgICB2YXIgZWwgPSB0aGlzO1xuICAgIGlmICghZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKGVsKSkgcmV0dXJuIG51bGw7XG4gICAgZG8ge1xuICAgICAgaWYgKGVsLm1hdGNoZXMocykpIHJldHVybiBlbDtcbiAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudCB8fCBlbC5wYXJlbnROb2RlO1xuICAgIH0gd2hpbGUgKGVsICE9PSBudWxsICYmIGVsLm5vZGVUeXBlID09PSAxKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxuY29uc3QgaG9tZV90bCA9IG5ldyBTcXVhcmVzKHtcbiAgY2FudmFzOiAnLmpzLXNxLXRsJyxcbiAgbnVtX3g6IDEsXG4gIG51bV95OiAxLFxuICBwYXR0ZXJuOiAnMScsXG4gIGNvbG9yOiAnIzM2QjFCRidcbn0pO1xuXG5jb25zdCBob21lX3RyID0gbmV3IFNxdWFyZXMoe1xuICBjYW52YXM6ICcuanMtc3EtdHInLFxuICBudW1feDogMixcbiAgbnVtX3k6IDEsXG4gIHBhdHRlcm46ICcxLDEnLFxuICBjb2xvcjogJyMzNkIxQkYnXG59KTtcblxuY29uc3QgaG9tZV9iciA9IG5ldyBTcXVhcmVzKHtcbiAgY2FudmFzOiAnLmpzLXNxLWJyJyxcbiAgbnVtX3g6IDEsXG4gIG51bV95OiAyLFxuICBwYXR0ZXJuOiAnMSwxJyxcbiAgY29sb3I6ICcjRjIzQzUwJ1xufSk7XG5cbmNvbnN0IGhvbWVfYmwgPSBuZXcgU3F1YXJlcyh7XG4gIGNhbnZhczogJy5qcy1zcS1ibCcsXG4gIG51bV94OiAyLFxuICBudW1feTogMixcbiAgcGF0dGVybjogJzEsMCwxLDEnLFxuICBjb2xvcjogJyNGMjNDNTAnXG59KTtcblxuY29uc3QgaG9tZV9pbnRybyA9IG5ldyBTcXVhcmVzKHtcbiAgY2FudmFzOiAnLmpzLXNxLWhvbWUtaW50cm8nLFxuICBudW1feDogNixcbiAgbnVtX3k6IDUsXG4gIGNvbG9yOiAnIzU2OGI4ZScsXG4gIHNpemU6IDEwLFxuICBwYXR0ZXJuOiBgMCwwLDEsMSwwLDEsXG4gICAgMCwxLDEsMCwwLDEsXG4gICAgMSwxLDAsMCwwLDEsXG4gICAgMCwxLDEsMCwwLDAsXG4gICAgMCwwLDEsMSwwLDFgXG59KTtcblxuY29uc3Qgc2l0ZV9oZWFkZXIgPSBuZXcgU3F1YXJlcyh7XG4gIGNhbnZhczogJy5qcy1zcS1zaXRlLWhlYWRlcicsXG4gIG51bV94OiAnaW5maW5pdGUnLFxuICBudW1feTogMSxcbiAgc2l6ZTogNSxcbiAgY29sb3I6ICcjMWQ0ZTZkJyxcbiAgZmlsbDogJ2V2ZW4nXG59KTtcblxuLyoqXG4gKiBSYW5kb20gZW1vamlcbiAqL1xuXG5mdW5jdGlvbiBnZXRSYW5kb21FbW9qaSgpIHtcbiAgY29uc3QgZW1vamlzID0gWyfwn6SkJywgJ/CfkLMnLCAn8J+NuycsICfwn5GK8J+PuycsICfwn42zJ107XG5cbiAgY29uc3QgZW1vamkgPSBlbW9qaXNbTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogKGVtb2ppcy5sZW5ndGggLSAxKSldO1xuICByZXR1cm4gZW1vamk7XG59XG5cbmlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtcmFuZG9tLWVtb2ppJykpIHtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXJhbmRvbS1lbW9qaScpLnRleHRDb250ZW50ID0gZ2V0UmFuZG9tRW1vamkoKTtcbn1cblxuLyoqXG4gKiBTbW9vdGhseSBzY3JvbGwgdG8gdG9wXG4gKi9cblxuaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1zY3JvbGwtdG9wJykpIHtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXNjcm9sbC10b3AnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbG9nbycpLmZvY3VzKCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIFByZWZldGNoIGxpbmtzIGluIG5hdiBmb3IgYmV0dGVyIHBlcmNlaXZlZCBwZXJmb3JtYW5jZVxuICovXG5cbnByZWZldGNoTmF2KCk7XG5cbmhpc3RvcnkucHVzaFN0YXRlKFxuICB7IHRoZW1lOiBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC8vZywgJycpIH0sXG4gIGxvY2F0aW9uLnBhdGhuYW1lLFxuICBsb2NhdGlvbi5wYXRobmFtZVxuKTtcblxuZnVuY3Rpb24gbGlua1Bvc3RsaXN0KCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBjb25zdCBsaW5rID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJ2EnKTtcbiAgY29uc3QgdGhlbWVDbGFzcyA9IGAke2xpbmsuZGF0YXNldC5wdWJsaWNhdGlvbn0tJHtsaW5rLmRhdGFzZXQucG9zdH1gO1xuICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRoZW1lJywgdGhlbWVDbGFzcyk7XG4gIGhpc3RvcnkucHVzaFN0YXRlKHsgdGhlbWU6IHRoZW1lQ2xhc3MgfSwgbGluay5ocmVmLCBsaW5rLmhyZWYpO1xuICBsb2FkUGFnZShsaW5rLmhyZWYpO1xufVxuXG5pZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXBvc3QtbGlzdCcpKSB7XG4gIGRvY3VtZW50XG4gICAgLnF1ZXJ5U2VsZWN0b3IoJy5qcy1wb3N0LWxpc3QnKVxuICAgIC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGxpbmtQb3N0bGlzdCk7XG59XG5cbndpbmRvdy5vbnBvcHN0YXRlID0gZnVuY3Rpb24oZSkge1xuICBpZiAoZS5zdGF0ZSkge1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGhlbWUnLCBlLnN0YXRlLnRoZW1lKTtcbiAgICBsb2FkUGFnZShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGxvYWRQYWdlKHVybCkge1xuICBjb25zdCBtYWluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXNpdGUtY29udGVudCcpO1xuICBtYWluLmlubmVySFRNTCA9ICcnO1xuICBtYWluLmNsYXNzTGlzdC5hZGQoJ3NpdGVfX2NvbnRlbnQtLWhpZGRlbicpO1xuXG4gIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgcmVxdWVzdC5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuXG4gIHJlcXVlc3Qub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICBpZiAodGhpcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IHRoaXMucmVzcG9uc2U7XG4gICAgICBtYWluLmlubmVySFRNTCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuanMtc2l0ZS1jb250ZW50JykuaW5uZXJIVE1MO1xuICAgICAgbWFpbi5jbGFzc0xpc3QucmVtb3ZlKCdzaXRlX19jb250ZW50LS1oaWRkZW4nKTtcbiAgICAgIGlmIChtYWluLnF1ZXJ5U2VsZWN0b3IoJy5qcy1wb3N0LWxpc3QnKSkge1xuICAgICAgICBtYWluXG4gICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5qcy1wb3N0LWxpc3QnKVxuICAgICAgICAgIC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGxpbmtQb3N0bGlzdCk7XG4gICAgICB9XG5cbiAgICAgIGxhenlMb2FkKG1haW4ucXVlcnlTZWxlY3RvckFsbCgnaW1nW2RhdGEtc3JjXScpKTtcbiAgICB9XG4gIH07XG5cbiAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgcGFnZV9jb250ZW50LmlubmVySFRNTCA9XG4gICAgICBcIkZvciBzb21lIHJlYXNvbiBJIGNvdWxkbid0IGNvbm5lY3QgdG8gdGhlIHNlcnZlciwgcGxlYXNlIHRyeSBsYXRlciBhZ2Fpbi5cIjtcbiAgfTtcblxuICByZXF1ZXN0LnNlbmQoKTtcbn1cblxuLy8gTGF6eSBsb2FkIGltYWdlc1xubGF6eUxvYWQoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW1nW2RhdGEtc3JjXScpKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=