!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){n(3),e.exports=n(2)},function(e,t,n){!function(){"use strict";"undefined"!=typeof document&&function(e){var t;function n(){t||(t=!0,e())}["interactive","complete"].indexOf(document.readyState)>=0?e():(t=!1,document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1))}(function(){var e=!0,t=!1,n=null,i={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function o(e){return!!(e&&e!==document&&"HTML"!==e.nodeName&&"BODY"!==e.nodeName&&"classList"in e&&"contains"in e.classList)}function s(e){e.classList.contains("focus-visible")||(e.classList.add("focus-visible"),e.setAttribute("data-focus-visible-added",""))}function a(t){e=!1}function r(){document.addEventListener("mousemove",c),document.addEventListener("mousedown",c),document.addEventListener("mouseup",c),document.addEventListener("pointermove",c),document.addEventListener("pointerdown",c),document.addEventListener("pointerup",c),document.addEventListener("touchmove",c),document.addEventListener("touchstart",c),document.addEventListener("touchend",c)}function c(t){"html"!==t.target.nodeName.toLowerCase()&&(e=!1,document.removeEventListener("mousemove",c),document.removeEventListener("mousedown",c),document.removeEventListener("mouseup",c),document.removeEventListener("pointermove",c),document.removeEventListener("pointerdown",c),document.removeEventListener("pointerup",c),document.removeEventListener("touchmove",c),document.removeEventListener("touchstart",c),document.removeEventListener("touchend",c))}document.addEventListener("keydown",function(t){o(document.activeElement)&&s(document.activeElement),e=!0},!0),document.addEventListener("mousedown",a,!0),document.addEventListener("pointerdown",a,!0),document.addEventListener("touchstart",a,!0),document.addEventListener("focus",function(t){var n,a,r;o(t.target)&&((e||(n=t.target,a=n.type,"INPUT"==(r=n.tagName)&&i[a]&&!n.readOnly||"TEXTAREA"==r&&!n.readOnly||n.isContentEditable))&&s(t.target))},!0),document.addEventListener("blur",function(e){var i;o(e.target)&&((e.target.classList.contains("focus-visible")||e.target.hasAttribute("data-focus-visible-added"))&&(t=!0,window.clearTimeout(n),n=window.setTimeout(function(){t=!1,window.clearTimeout(n)},100),(i=e.target).hasAttribute("data-focus-visible-added")&&(i.classList.remove("focus-visible"),i.removeAttribute("data-focus-visible-added"))))},!0),document.addEventListener("visibilitychange",function(n){"hidden"==document.visibilityState&&(t&&(e=!0),r())},!0),r(),document.body.classList.add("js-focus-visible")})}()},function(e,t,n){},function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n.r(t);var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=t,this.canvas=document.querySelector(t.canvas),this.canvas&&(this.context=this.canvas.getContext("2d"),this.color="red",this.size=this.prop_set(t.size,20),this.num_x=t.num_x,this.num_y=t.num_y,this.init_canvas())}var t,n,o;return t=e,(n=[{key:"init_canvas",value:function(){if(this.prepare_canvas(),this.attach_events(),this.options.pattern&&this.parse_pattern(),this.options.fill){for(var e=Math.round(this.get_parent_width()/this.size/2),t=0;t<e;t++)this.squares.push({x:this.size*(2*t),y:0});this.draw_squares()}}},{key:"attach_events",value:function(){this.place_square=this.place_square.bind(this),this.canvas.addEventListener("click",this.place_square)}},{key:"place_square",value:function(e){this.context.clearRect(0,0,this.canvas.width,this.canvas.height);var t=e.pageX-e.target.offsetLeft,n=e.pageY-e.target.offsetTop,i=t-t%this.size,o=n-n%this.size;o===this.canvas.height&&(o-=this.size),i===this.canvas.width&&(i-=this.size);var s=this.squares.findIndex(function(e){return e.x===i&e.y===o});s>-1?this.squares.splice(s,1):this.squares.push({x:i,y:o}),this.draw_squares(this.context,this.squares)}},{key:"prop_set",value:function(e,t){return e||t}},{key:"prepare_canvas",value:function(){this.canvas.classList.add("square-canvas--visible"),this.canvas.width=this.num_x*this.size,this.canvas.height=this.num_y*this.size,"infinite"===this.num_x&&(this.canvas.width=this.get_parent_width()),this.squares=[]}},{key:"get_parent_width",value:function(){var e=getComputedStyle(this.canvas.parentNode),t=this.canvas.parentNode.clientWidth;return t-=parseFloat(e.paddingLeft)+parseFloat(e.paddingRight)}},{key:"parse_pattern",value:function(){for(var e=this.options.pattern.split(","),t=0;t<e.length;t++){var n=parseInt(e[t].trim()),i=Math.floor(t/this.num_x),o=(t+this.num_x)%this.num_x;"infinite"===this.num_x&&(i=0,o=t),n&&this.squares.push({x:this.size*o,y:this.size*i})}this.draw_squares()}},{key:"draw_squares",value:function(){this.context.fillStyle=this.prop_set(this.options.color,"rgba(51, 51, 51, 0.9)");for(var e=0;e<this.squares.length;e++){var t=this.squares[e];this.context.fillRect(t.x,t.y,this.size,this.size)}}}])&&i(t.prototype,n),o&&i(t,o),e}(),s=s||function(e){var t=Date.now();return setTimeout(function(){e({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-t))}})},1)},a=s;var r,c=function(){navigator.connection&&navigator.connection.saveData&&(navigator.connection.effectiveType.includes("2g")||navigator.connection.saveData)||a(function(){!function(){for(var e,t,n=document.querySelectorAll(".js-nav-main a"),i=0;i<n.length;i++)e=n[i].href,t=void 0,((t=document.createElement("link")).relList||{}).supports&&!t.relList.supports("prefetch")||(t.rel="prefetch",t.href=e,document.head.appendChild(t))}()})};function u(e){var t,n=e.dataset.src;return(t=n,new Promise(function(e,n){var i=new Image;t&&(i.src=t),i.onload=e,i.onerror=n})).then(function(){e.classList.add("lazyloaded"),e.src=n,e.removeAttribute("data-src")})}function d(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.intersectionRatio>0){var i=n.target;u(i),i.classList.remove("lazy"),r.unobserve(i)}}}var l,v=function(e){if(e.length){r=new IntersectionObserver(d,{rootMargin:"100px 0px"});for(var t=0;t<e.length;t++){var n=e[t];n.classList.contains("lazyloaded")||r.observe(n)}}},m=document.querySelectorAll(".js-demo");function h(e){var t=document.createElement("div");t.classList.add("demo__controls");var n=document.createElement("button"),i=document.createElement("span");i.classList.add("btn__inner"),i.textContent="Replay animation",n.appendChild(i),n.classList.add("btn"),n.classList.add("demo__btn"),n.addEventListener("click",function(){e.classList.remove("demo--playing"),setTimeout(function(){e.classList.add("demo--playing")},600)}),t.appendChild(n),e.appendChild(t)}function f(e){for(var t=function(t){var n=e[t];1===n.intersectionRatio&&setTimeout(function(){n.target.classList.add("demo--playing"),l.unobserve(n.target)},400)},n=0;n<e.length;n++)t(n)}var p=function(){if(m.length)for(var e=0;e<m.length;e++){var t=m[e];h(t),l=new IntersectionObserver(f,{threshold:[1]}),t.classList.contains("demo--playing")||l.observe(t)}};n(1),Element.prototype.closest||(Element.prototype.closest=function(e){var t=this;if(!document.documentElement.contains(t))return null;do{if(t.matches(e))return t;t=t.parentElement||t.parentNode}while(null!==t&&1===t.nodeType);return null});var y;new o({canvas:".js-sq-tl",num_x:1,num_y:1,pattern:"1",color:"#36B1BF"}),new o({canvas:".js-sq-tr",num_x:2,num_y:1,pattern:"1,1",color:"#36B1BF"}),new o({canvas:".js-sq-br",num_x:1,num_y:2,pattern:"1,1",color:"#F23C50"}),new o({canvas:".js-sq-bl",num_x:2,num_y:2,pattern:"1,0,1,1",color:"#F23C50"}),new o({canvas:".js-sq-home-intro",num_x:6,num_y:5,color:"#568b8e",size:10,pattern:"0,0,1,1,0,1,\n    0,1,1,0,0,1,\n    1,1,0,0,0,1,\n    0,1,1,0,0,0,\n    0,0,1,1,0,1"});document.querySelector(".js-random-emoji")&&(document.querySelector(".js-random-emoji").textContent=(y=["🤤","🐳","🍻","👊🏻","🍳"])[Math.round(Math.random()*(y.length-1))]),document.querySelector(".js-scroll-top")&&document.querySelector(".js-scroll-top").addEventListener("click",function(e){e.preventDefault(),document.querySelector(".js-logo").focus()}),c(),v(document.querySelectorAll(".lazy")),p();for(var g=document.querySelectorAll(".js-a-focus-demo"),_=[],b=function(e){_.push(0),function(){var t,n=g[e],i=n.querySelectorAll("a, button"),o=!1,s=document.createElement("button"),a=document.createElement("span");s.classList.add("btn"),a.classList.add("btn__inner"),s.appendChild(a);var r="Play animation";n.hasAttribute("data-button")&&(r=n.getAttribute("data-button")),u(r),n.insertBefore(s,n.firstChild),s.addEventListener("click",function(){o?(clearInterval(t),s.textContent=r):(i[_[e]].focus(),t=window.setInterval(d,700),u("Stop animation")),o=!o});for(var c=0;c<i.length;c++)i[c].addEventListener("focus",function(e){e.target.classList.contains("a-grid-order__link--mismatch")&&e.target.classList.add("a-grid-order__link--dangle")});function u(e){a.textContent=e}function d(){_[e]<i.length-1?_[e]++:(_[e]=0,clearInterval(t),u(r),o=!1),i[_[e]].focus()}}()},L=0;L<g.length;L++)b(L)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZvY3VzLXZpc2libGUvZGlzdC9mb2N1cy12aXNpYmxlLmpzIiwid2VicGFjazovLy8uL3NyYy9zdGF0aWMvc2NyaXB0cy9zcXVhcmVzLmpzIiwid2VicGFjazovLy8uL3NyYy9zdGF0aWMvc2NyaXB0cy9yZXF1ZXN0LWlkbGUtY2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXRpYy9zY3JpcHRzL3ByZWZldGNoLW5hdi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGljL3NjcmlwdHMvbGF6eWxvYWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXRpYy9zY3JpcHRzL2RlbW8uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXRpYy9zY3JpcHRzL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZG9jdW1lbnQiLCJjYWxsYmFjayIsImxvYWRlZCIsImxvYWQiLCJpbmRleE9mIiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3aW5kb3ciLCJvbkRPTVJlYWR5IiwiaGFkS2V5Ym9hcmRFdmVudCIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0IiwiaW5wdXRUeXBlc1doaXRlbGlzdCIsInRleHQiLCJzZWFyY2giLCJ1cmwiLCJ0ZWwiLCJlbWFpbCIsInBhc3N3b3JkIiwibnVtYmVyIiwiZGF0ZSIsIm1vbnRoIiwid2VlayIsInRpbWUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiaXNWYWxpZEZvY3VzVGFyZ2V0IiwiZWwiLCJub2RlTmFtZSIsImNsYXNzTGlzdCIsImFkZEZvY3VzVmlzaWJsZUNsYXNzIiwiY29udGFpbnMiLCJhZGQiLCJzZXRBdHRyaWJ1dGUiLCJvblBvaW50ZXJEb3duIiwiZSIsImFkZEluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycyIsIm9uSW5pdGlhbFBvaW50ZXJNb3ZlIiwidGFyZ2V0IiwidG9Mb3dlckNhc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWN0aXZlRWxlbWVudCIsInR5cGUiLCJ0YWdOYW1lIiwicmVhZE9ubHkiLCJpc0NvbnRlbnRFZGl0YWJsZSIsImhhc0F0dHJpYnV0ZSIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJyZW1vdmUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ2aXNpYmlsaXR5U3RhdGUiLCJib2R5IiwiZmFjdG9yeSIsIlNxdWFyZXMiLCJvcHRpb25zIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsImNhbnZhcyIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsImNvbG9yIiwic2l6ZSIsInByb3Bfc2V0IiwibnVtX3giLCJudW1feSIsImluaXRfY2FudmFzIiwicHJlcGFyZV9jYW52YXMiLCJhdHRhY2hfZXZlbnRzIiwicGF0dGVybiIsInBhcnNlX3BhdHRlcm4iLCJmaWxsIiwibnVtX2JveGVzIiwiTWF0aCIsInJvdW5kIiwiZ2V0X3BhcmVudF93aWR0aCIsInNxdWFyZXMiLCJwdXNoIiwieCIsInkiLCJkcmF3X3NxdWFyZXMiLCJwbGFjZV9zcXVhcmUiLCJjbGVhclJlY3QiLCJ3aWR0aCIsImhlaWdodCIsInhfcmF3IiwicGFnZVgiLCJvZmZzZXRMZWZ0IiwieV9yYXciLCJwYWdlWSIsIm9mZnNldFRvcCIsImluZGV4IiwiZmluZEluZGV4IiwicG9zIiwic3BsaWNlIiwicHJvcCIsInBhcmVudF9zdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwicGFyZW50Tm9kZSIsInBhcmVudF93aWR0aCIsImNsaWVudFdpZHRoIiwicGFyc2VGbG9hdCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0Iiwic3BsaXQiLCJsZW5ndGgiLCJib3giLCJwYXJzZUludCIsInRyaW0iLCJyb3ciLCJmbG9vciIsImNvbCIsImZpbGxTdHlsZSIsInNxdWFyZSIsImZpbGxSZWN0IiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNiIiwic3RhcnQiLCJEYXRlIiwibm93IiwiZGlkVGltZW91dCIsInRpbWVSZW1haW5pbmciLCJtYXgiLCJwcmVmZXRjaE5hdiIsIm9ic2VydmVyIiwibmF2aWdhdG9yIiwiY29ubmVjdGlvbiIsInNhdmVEYXRhIiwiZWZmZWN0aXZlVHlwZSIsImluY2x1ZGVzIiwibGluayIsImxpbmtzIiwicXVlcnlTZWxlY3RvckFsbCIsImhyZWYiLCJjcmVhdGVFbGVtZW50IiwicmVsTGlzdCIsInN1cHBvcnRzIiwicmVsIiwiaGVhZCIsImFwcGVuZENoaWxkIiwiZ2V0TGlua3MiLCJsb2FkSW1hZ2UiLCJpbWFnZSIsInNyYyIsImRhdGFzZXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIkltYWdlIiwib25sb2FkIiwib25lcnJvciIsInRoZW4iLCJpbWFnZVZpc2libGUiLCJlbnRyaWVzIiwiZW50cnkiLCJpbnRlcnNlY3Rpb25SYXRpbyIsInVub2JzZXJ2ZSIsImxhenlMb2FkIiwiZGVtb09ic2VydmVyIiwiaW1hZ2VzIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJyb290TWFyZ2luIiwib2JzZXJ2ZSIsImRlbW9zIiwiZGVtb0FkZEJ1dHRvbiIsImRlbW8iLCJjb250cm9scyIsImJ1dHRvbiIsImJ1dHRvbl9pbm5lciIsInRleHRDb250ZW50IiwiZGVtb1Zpc2libGUiLCJfbG9vcCIsImVuaGFuY2VEZW1vcyIsInRocmVzaG9sZCIsInJlcXVpcmUiLCJFbGVtZW50IiwiY2xvc2VzdCIsImRvY3VtZW50RWxlbWVudCIsIm1hdGNoZXMiLCJwYXJlbnRFbGVtZW50Iiwibm9kZVR5cGUiLCJlbW9qaXMiLCJyYW5kb20iLCJwcmV2ZW50RGVmYXVsdCIsImZvY3VzIiwiYWN0aXZlTGluayIsImZvY3VzSW50ZXJ2YWwiLCJhbmltYXRpbmciLCJwbGF5cGF1c2UiLCJwbGF5cGF1c2VfaW5uZXIiLCJidXR0b25UZXh0SW5hY3RpdmUiLCJnZXRBdHRyaWJ1dGUiLCJzZXRCdXR0b25UZXh0IiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImZvY3VzTmV4dCIsImoiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxZQUFBLENBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJC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cEJpSixFQUFxQnpCLEVBQUswQixhQUFhLGdCQUd6Q0MsRUFBY0YsR0FFZHpCLEVBQUs0QixhQUFhTCxFQUFXdkIsRUFBSzZCLFlBRWxDTixFQUFVdkwsaUJBQWlCLFFBQVMsV0FDOUJzTCxHQUNGUSxjQUFjVCxHQUNkRSxFQUFVbkIsWUFBY3FCLElBRXhCM0QsRUFBTXNELEVBQVcxTixJQUFJeU4sUUFFckJFLEVBQWdCcEwsT0FBTzhMLFlBQVlDLEVBQVcsS0FDOUNMLEVBbkJtQixtQkFzQnJCTCxHQUFhQSxJQUdmLElBQUssSUFBSVcsRUFBSSxFQUFHQSxFQUFJbkUsRUFBTTFCLE9BQVE2RixJQUNoQ25FLEVBQU1tRSxHQUFHak0saUJBQWlCLFFBQVMsU0FBUzZCLEdBQ3RDQSxFQUFFRyxPQUFPVCxVQUFVRSxTQUFTLGlDQUM5QkksRUFBRUcsT0FBT1QsVUFBVUcsSUFBSSxnQ0FLN0IsU0FBU2lLLEVBQWNwTCxHQUNyQmlMLEVBQWdCcEIsWUFBYzdKLEVBR2hDLFNBQVN5TCxJQUNIWixFQUFXMU4sR0FBS29LLEVBQU0xQixPQUFTLEVBQy9CZ0YsRUFBVzFOLE1BRVgwTixFQUFXMU4sR0FBSyxFQUNoQm9PLGNBQWNULEdBQ2RNLEVBQWNGLEdBQ2RILEdBQVksR0FHaEJ4RCxFQUFNc0QsRUFBVzFOLElBQUl5TixTQTNEekIsSUFIT3pOLEVBQUksRUFBR0EsRUFBSW9NLEVBQU0xRCxPQUFRMUksSUFBSzRNLEVBQTlCNU0iLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlXG4gICAqL1xuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICB2YXIgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbiAgICB2YXIgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gbnVsbDtcblxuICAgIHZhciBpbnB1dFR5cGVzV2hpdGVsaXN0ID0ge1xuICAgICAgdGV4dDogdHJ1ZSxcbiAgICAgIHNlYXJjaDogdHJ1ZSxcbiAgICAgIHVybDogdHJ1ZSxcbiAgICAgIHRlbDogdHJ1ZSxcbiAgICAgIGVtYWlsOiB0cnVlLFxuICAgICAgcGFzc3dvcmQ6IHRydWUsXG4gICAgICBudW1iZXI6IHRydWUsXG4gICAgICBkYXRlOiB0cnVlLFxuICAgICAgbW9udGg6IHRydWUsXG4gICAgICB3ZWVrOiB0cnVlLFxuICAgICAgdGltZTogdHJ1ZSxcbiAgICAgIGRhdGV0aW1lOiB0cnVlLFxuICAgICAgJ2RhdGV0aW1lLWxvY2FsJzogdHJ1ZVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGxlZ2FjeSBicm93c2VycyBhbmQgaWZyYW1lcyB3aGljaCBzb21ldGltZXMgZm9jdXNcbiAgICAgKiBlbGVtZW50cyBsaWtlIGRvY3VtZW50LCBib2R5LCBhbmQgbm9uLWludGVyYWN0aXZlIFNWRy5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNWYWxpZEZvY3VzVGFyZ2V0KGVsKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGVsICYmXG4gICAgICAgIGVsICE9PSBkb2N1bWVudCAmJlxuICAgICAgICBlbC5ub2RlTmFtZSAhPT0gJ0hUTUwnICYmXG4gICAgICAgIGVsLm5vZGVOYW1lICE9PSAnQk9EWScgJiZcbiAgICAgICAgJ2NsYXNzTGlzdCcgaW4gZWwgJiZcbiAgICAgICAgJ2NvbnRhaW5zJyBpbiBlbC5jbGFzc0xpc3RcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB3aGV0aGVyIHRoZSBnaXZlbiBlbGVtZW50IHNob3VsZCBhdXRvbWF0aWNhbGx5IHRyaWdnZXIgdGhlXG4gICAgICogYGZvY3VzLXZpc2libGVgIGNsYXNzIGJlaW5nIGFkZGVkLCBpLmUuIHdoZXRoZXIgaXQgc2hvdWxkIGFsd2F5cyBtYXRjaFxuICAgICAqIGA6Zm9jdXMtdmlzaWJsZWAgd2hlbiBmb2N1c2VkLlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KGVsKSB7XG4gICAgICB2YXIgdHlwZSA9IGVsLnR5cGU7XG4gICAgICB2YXIgdGFnTmFtZSA9IGVsLnRhZ05hbWU7XG5cbiAgICAgIGlmICh0YWdOYW1lID09ICdJTlBVVCcgJiYgaW5wdXRUeXBlc1doaXRlbGlzdFt0eXBlXSAmJiAhZWwucmVhZE9ubHkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0YWdOYW1lID09ICdURVhUQVJFQScgJiYgIWVsLnJlYWRPbmx5KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWwuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byB0aGUgZ2l2ZW4gZWxlbWVudCBpZiBpdCB3YXMgbm90IGFkZGVkIGJ5XG4gICAgICogdGhlIGF1dGhvci5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkRm9jdXNWaXNpYmxlQ2xhc3MoZWwpIHtcbiAgICAgIGlmIChlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZvY3VzLXZpc2libGUnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKCdmb2N1cy12aXNpYmxlJyk7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMtdmlzaWJsZS1hZGRlZCcsICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBmcm9tIHRoZSBnaXZlbiBlbGVtZW50IGlmIGl0IHdhcyBub3RcbiAgICAgKiBvcmlnaW5hbGx5IGFkZGVkIGJ5IHRoZSBhdXRob3IuXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZUZvY3VzVmlzaWJsZUNsYXNzKGVsKSB7XG4gICAgICBpZiAoIWVsLmhhc0F0dHJpYnV0ZSgnZGF0YS1mb2N1cy12aXNpYmxlLWFkZGVkJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnZm9jdXMtdmlzaWJsZScpO1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWZvY3VzLXZpc2libGUtYWRkZWQnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmVhdCBga2V5ZG93bmAgYXMgYSBzaWduYWwgdGhhdCB0aGUgdXNlciBpcyBpbiBrZXlib2FyZCBtb2RhbGl0eS5cbiAgICAgKiBBcHBseSBgZm9jdXMtdmlzaWJsZWAgdG8gYW55IGN1cnJlbnQgYWN0aXZlIGVsZW1lbnQgYW5kIGtlZXAgdHJhY2tcbiAgICAgKiBvZiBvdXIga2V5Ym9hcmQgbW9kYWxpdHkgc3RhdGUgd2l0aCBgaGFkS2V5Ym9hcmRFdmVudGAuXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7XG4gICAgICBpZiAoaXNWYWxpZEZvY3VzVGFyZ2V0KGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIGFkZEZvY3VzVmlzaWJsZUNsYXNzKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiBhdCBhbnkgcG9pbnQgYSB1c2VyIGNsaWNrcyB3aXRoIGEgcG9pbnRpbmcgZGV2aWNlLCBlbnN1cmUgdGhhdCB3ZSBjaGFuZ2VcbiAgICAgKiB0aGUgbW9kYWxpdHkgYXdheSBmcm9tIGtleWJvYXJkLlxuICAgICAqIFRoaXMgYXZvaWRzIHRoZSBzaXR1YXRpb24gd2hlcmUgYSB1c2VyIHByZXNzZXMgYSBrZXkgb24gYW4gYWxyZWFkeSBmb2N1c2VkXG4gICAgICogZWxlbWVudCwgYW5kIHRoZW4gY2xpY2tzIG9uIGEgZGlmZmVyZW50IGVsZW1lbnQsIGZvY3VzaW5nIGl0IHdpdGggYVxuICAgICAqIHBvaW50aW5nIGRldmljZSwgd2hpbGUgd2Ugc3RpbGwgdGhpbmsgd2UncmUgaW4ga2V5Ym9hcmQgbW9kYWxpdHkuXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uUG9pbnRlckRvd24oZSkge1xuICAgICAgaGFkS2V5Ym9hcmRFdmVudCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uIGBmb2N1c2AsIGFkZCB0aGUgYGZvY3VzLXZpc2libGVgIGNsYXNzIHRvIHRoZSB0YXJnZXQgaWY6XG4gICAgICogLSB0aGUgdGFyZ2V0IHJlY2VpdmVkIGZvY3VzIGFzIGEgcmVzdWx0IG9mIGtleWJvYXJkIG5hdmlnYXRpb24sIG9yXG4gICAgICogLSB0aGUgZXZlbnQgdGFyZ2V0IGlzIGFuIGVsZW1lbnQgdGhhdCB3aWxsIGxpa2VseSByZXF1aXJlIGludGVyYWN0aW9uXG4gICAgICogICB2aWEgdGhlIGtleWJvYXJkIChlLmcuIGEgdGV4dCBib3gpXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uRm9jdXMoZSkge1xuICAgICAgLy8gUHJldmVudCBJRSBmcm9tIGZvY3VzaW5nIHRoZSBkb2N1bWVudCBvciBIVE1MIGVsZW1lbnQuXG4gICAgICBpZiAoIWlzVmFsaWRGb2N1c1RhcmdldChlLnRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFkS2V5Ym9hcmRFdmVudCB8fCBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShlLnRhcmdldCkpIHtcbiAgICAgICAgYWRkRm9jdXNWaXNpYmxlQ2xhc3MoZS50YXJnZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uIGBibHVyYCwgcmVtb3ZlIHRoZSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgZnJvbSB0aGUgdGFyZ2V0LlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbkJsdXIoZSkge1xuICAgICAgaWYgKCFpc1ZhbGlkRm9jdXNUYXJnZXQoZS50YXJnZXQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZvY3VzLXZpc2libGUnKSB8fFxuICAgICAgICBlLnRhcmdldC5oYXNBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMtdmlzaWJsZS1hZGRlZCcpXG4gICAgICApIHtcbiAgICAgICAgLy8gVG8gZGV0ZWN0IGEgdGFiL3dpbmRvdyBzd2l0Y2gsIHdlIGxvb2sgZm9yIGEgYmx1ciBldmVudCBmb2xsb3dlZFxuICAgICAgICAvLyByYXBpZGx5IGJ5IGEgdmlzaWJpbGl0eSBjaGFuZ2UuXG4gICAgICAgIC8vIElmIHdlIGRvbid0IHNlZSBhIHZpc2liaWxpdHkgY2hhbmdlIHdpdGhpbiAxMDBtcywgaXQncyBwcm9iYWJseSBhXG4gICAgICAgIC8vIHJlZ3VsYXIgZm9jdXMgY2hhbmdlLlxuICAgICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IHRydWU7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0KTtcbiAgICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbiAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCk7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgICAgIHJlbW92ZUZvY3VzVmlzaWJsZUNsYXNzKGUudGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdXNlciBjaGFuZ2VzIHRhYnMsIGtlZXAgdHJhY2sgb2Ygd2hldGhlciBvciBub3QgdGhlIHByZXZpb3VzbHlcbiAgICAgKiBmb2N1c2VkIGVsZW1lbnQgaGFkIC5mb2N1cy12aXNpYmxlLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvblZpc2liaWxpdHlDaGFuZ2UoZSkge1xuICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PSAnaGlkZGVuJykge1xuICAgICAgICAvLyBJZiB0aGUgdGFiIGJlY29tZXMgYWN0aXZlIGFnYWluLCB0aGUgYnJvd3NlciB3aWxsIGhhbmRsZSBjYWxsaW5nIGZvY3VzXG4gICAgICAgIC8vIG9uIHRoZSBlbGVtZW50IChTYWZhcmkgYWN0dWFsbHkgY2FsbHMgaXQgdHdpY2UpLlxuICAgICAgICAvLyBJZiB0aGlzIHRhYiBjaGFuZ2UgY2F1c2VkIGEgYmx1ciBvbiBhbiBlbGVtZW50IHdpdGggZm9jdXMtdmlzaWJsZSxcbiAgICAgICAgLy8gcmUtYXBwbHkgdGhlIGNsYXNzIHdoZW4gdGhlIHVzZXIgc3dpdGNoZXMgYmFjayB0byB0aGUgdGFiLlxuICAgICAgICBpZiAoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkpIHtcbiAgICAgICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBhZGRJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBncm91cCBvZiBsaXN0ZW5lcnMgdG8gZGV0ZWN0IHVzYWdlIG9mIGFueSBwb2ludGluZyBkZXZpY2VzLlxuICAgICAqIFRoZXNlIGxpc3RlbmVycyB3aWxsIGJlIGFkZGVkIHdoZW4gdGhlIHBvbHlmaWxsIGZpcnN0IGxvYWRzLCBhbmQgYW55dGltZVxuICAgICAqIHRoZSB3aW5kb3cgaXMgYmx1cnJlZCwgc28gdGhhdCB0aGV5IGFyZSBhY3RpdmUgd2hlbiB0aGUgd2luZG93IHJlZ2FpbnNcbiAgICAgKiBmb2N1cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBwb2xmeWlsbCBmaXJzdCBsb2FkcywgYXNzdW1lIHRoZSB1c2VyIGlzIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICAgICAqIElmIGFueSBldmVudCBpcyByZWNlaXZlZCBmcm9tIGEgcG9pbnRpbmcgZGV2aWNlIChlLmcuIG1vdXNlLCBwb2ludGVyLFxuICAgICAqIHRvdWNoKSwgdHVybiBvZmYga2V5Ym9hcmQgbW9kYWxpdHkuXG4gICAgICogVGhpcyBhY2NvdW50cyBmb3Igc2l0dWF0aW9ucyB3aGVyZSBmb2N1cyBlbnRlcnMgdGhlIHBhZ2UgZnJvbSB0aGUgVVJMIGJhci5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Jbml0aWFsUG9pbnRlck1vdmUoZSkge1xuICAgICAgLy8gV29yayBhcm91bmQgYSBTYWZhcmkgcXVpcmsgdGhhdCBmaXJlcyBhIG1vdXNlbW92ZSBvbiA8aHRtbD4gd2hlbmV2ZXIgdGhlXG4gICAgICAvLyB3aW5kb3cgYmx1cnMsIGV2ZW4gaWYgeW91J3JlIHRhYmJpbmcgb3V0IG9mIHRoZSBwYWdlLiDCr1xcXyjjg4QpXy/Cr1xuICAgICAgaWYgKGUudGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdodG1sJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSBmYWxzZTtcbiAgICAgIHJlbW92ZUluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycygpO1xuICAgIH1cblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbktleURvd24sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uUG9pbnRlckRvd24sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgb25Qb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uUG9pbnRlckRvd24sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgb25Gb2N1cywgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIG9uQmx1ciwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIG9uVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG4gICAgYWRkSW5pdGlhbFBvaW50ZXJNb3ZlTGlzdGVuZXJzKCk7XG5cbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2pzLWZvY3VzLXZpc2libGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpcHRpb24gd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBmdW5jdGlvbiBvbkRPTVJlYWR5KGNhbGxiYWNrKSB7XG4gICAgdmFyIGxvYWRlZDtcblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHdyYXBwZXIgZm9yIGNoZWNrIGxvYWRlZCBzdGF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvYWQoKSB7XG4gICAgICBpZiAoIWxvYWRlZCkge1xuICAgICAgICBsb2FkZWQgPSB0cnVlO1xuXG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFsnaW50ZXJhY3RpdmUnLCAnY29tcGxldGUnXS5pbmRleE9mKGRvY3VtZW50LnJlYWR5U3RhdGUpID49IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvYWRlZCA9IGZhbHNlO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGxvYWQsIGZhbHNlKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgbG9hZCwgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgb25ET01SZWFkeShpbml0KTtcbiAgfVxuXG59KSkpO1xuIiwiY2xhc3MgU3F1YXJlcyB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG9wdGlvbnMuY2FudmFzKTtcblxuICAgIGlmICghdGhpcy5jYW52YXMpIHJldHVybjtcblxuICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgdGhpcy5jb2xvciA9ICdyZWQnO1xuXG4gICAgdGhpcy5zaXplID0gdGhpcy5wcm9wX3NldChvcHRpb25zLnNpemUsIDIwKTtcblxuICAgIHRoaXMubnVtX3ggPSBvcHRpb25zLm51bV94O1xuICAgIHRoaXMubnVtX3kgPSBvcHRpb25zLm51bV95O1xuXG4gICAgdGhpcy5pbml0X2NhbnZhcygpO1xuICB9XG5cbiAgaW5pdF9jYW52YXMoKSB7XG4gICAgdGhpcy5wcmVwYXJlX2NhbnZhcygpO1xuICAgIHRoaXMuYXR0YWNoX2V2ZW50cygpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wYXR0ZXJuKSB7XG4gICAgICB0aGlzLnBhcnNlX3BhdHRlcm4oKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmZpbGwpIHtcbiAgICAgIGNvbnN0IG51bV9ib3hlcyA9IE1hdGgucm91bmQodGhpcy5nZXRfcGFyZW50X3dpZHRoKCkgLyB0aGlzLnNpemUgLyAyKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1fYm94ZXM7IGkrKykge1xuICAgICAgICB0aGlzLnNxdWFyZXMucHVzaCh7IHg6IHRoaXMuc2l6ZSAqICgyICogaSksIHk6IDAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZHJhd19zcXVhcmVzKCk7XG4gICAgfVxuICB9XG5cbiAgYXR0YWNoX2V2ZW50cygpIHtcbiAgICB0aGlzLnBsYWNlX3NxdWFyZSA9IHRoaXMucGxhY2Vfc3F1YXJlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBsYWNlX3NxdWFyZSk7XG4gIH1cblxuICBwbGFjZV9zcXVhcmUoZSkge1xuICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG5cbiAgICBjb25zdCB4X3JhdyA9IGUucGFnZVggLSBlLnRhcmdldC5vZmZzZXRMZWZ0O1xuICAgIGNvbnN0IHlfcmF3ID0gZS5wYWdlWSAtIGUudGFyZ2V0Lm9mZnNldFRvcDtcblxuICAgIGxldCB4ID0geF9yYXcgLSAoeF9yYXcgJSB0aGlzLnNpemUpO1xuICAgIGxldCB5ID0geV9yYXcgLSAoeV9yYXcgJSB0aGlzLnNpemUpO1xuXG4gICAgaWYgKHkgPT09IHRoaXMuY2FudmFzLmhlaWdodCkge1xuICAgICAgeSAtPSB0aGlzLnNpemU7XG4gICAgfVxuICAgIGlmICh4ID09PSB0aGlzLmNhbnZhcy53aWR0aCkge1xuICAgICAgeCAtPSB0aGlzLnNpemU7XG4gICAgfVxuXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnNxdWFyZXMuZmluZEluZGV4KHBvcyA9PiAocG9zLnggPT09IHgpICYgKHBvcy55ID09PSB5KSk7XG5cbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdGhpcy5zcXVhcmVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3F1YXJlcy5wdXNoKHsgeDogeCwgeTogeSB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmRyYXdfc3F1YXJlcyh0aGlzLmNvbnRleHQsIHRoaXMuc3F1YXJlcyk7XG4gIH1cblxuICBwcm9wX3NldChwcm9wLCB2YWx1ZSkge1xuICAgIHJldHVybiBwcm9wID8gcHJvcCA6IHZhbHVlO1xuICB9XG5cbiAgcHJlcGFyZV9jYW52YXMoKSB7XG4gICAgdGhpcy5jYW52YXMuY2xhc3NMaXN0LmFkZCgnc3F1YXJlLWNhbnZhcy0tdmlzaWJsZScpO1xuXG4gICAgdGhpcy5jYW52YXMud2lkdGggPSB0aGlzLm51bV94ICogdGhpcy5zaXplO1xuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMubnVtX3kgKiB0aGlzLnNpemU7XG5cbiAgICBpZiAodGhpcy5udW1feCA9PT0gJ2luZmluaXRlJykge1xuICAgICAgdGhpcy5jYW52YXMud2lkdGggPSB0aGlzLmdldF9wYXJlbnRfd2lkdGgoKTtcbiAgICB9XG5cbiAgICB0aGlzLnNxdWFyZXMgPSBbXTtcbiAgfVxuXG4gIGdldF9wYXJlbnRfd2lkdGgoKSB7XG4gICAgY29uc3QgcGFyZW50X3N0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUodGhpcy5jYW52YXMucGFyZW50Tm9kZSk7XG4gICAgbGV0IHBhcmVudF93aWR0aCA9IHRoaXMuY2FudmFzLnBhcmVudE5vZGUuY2xpZW50V2lkdGg7XG4gICAgcGFyZW50X3dpZHRoIC09XG4gICAgICBwYXJzZUZsb2F0KHBhcmVudF9zdHlsZXMucGFkZGluZ0xlZnQpICtcbiAgICAgIHBhcnNlRmxvYXQocGFyZW50X3N0eWxlcy5wYWRkaW5nUmlnaHQpO1xuXG4gICAgcmV0dXJuIHBhcmVudF93aWR0aDtcbiAgfVxuXG4gIHBhcnNlX3BhdHRlcm4oKSB7XG4gICAgY29uc3QgcGF0dGVybiA9IHRoaXMub3B0aW9ucy5wYXR0ZXJuLnNwbGl0KCcsJyk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdHRlcm4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGJveCA9IHBhcnNlSW50KHBhdHRlcm5baV0udHJpbSgpKTtcbiAgICAgIGxldCByb3cgPSBNYXRoLmZsb29yKGkgLyB0aGlzLm51bV94KTtcbiAgICAgIGxldCBjb2wgPSAoaSArIHRoaXMubnVtX3gpICUgdGhpcy5udW1feDtcblxuICAgICAgaWYgKHRoaXMubnVtX3ggPT09ICdpbmZpbml0ZScpIHtcbiAgICAgICAgcm93ID0gMDtcbiAgICAgICAgY29sID0gaTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJveCkge1xuICAgICAgICB0aGlzLnNxdWFyZXMucHVzaCh7IHg6IHRoaXMuc2l6ZSAqIGNvbCwgeTogdGhpcy5zaXplICogcm93IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZHJhd19zcXVhcmVzKCk7XG4gIH1cblxuICBkcmF3X3NxdWFyZXMoKSB7XG4gICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMucHJvcF9zZXQoXG4gICAgICB0aGlzLm9wdGlvbnMuY29sb3IsXG4gICAgICAncmdiYSg1MSwgNTEsIDUxLCAwLjkpJ1xuICAgICk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3F1YXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgc3F1YXJlID0gdGhpcy5zcXVhcmVzW2ldO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0KHNxdWFyZS54LCBzcXVhcmUueSwgdGhpcy5zaXplLCB0aGlzLnNpemUpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTcXVhcmVzO1xuIiwiY29uc3QgcmVxdWVzdElkbGVDYWxsYmFjayA9XG4gIHJlcXVlc3RJZGxlQ2FsbGJhY2sgfHxcbiAgZnVuY3Rpb24oY2IpIHtcbiAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBjYih7XG4gICAgICAgIGRpZFRpbWVvdXQ6IGZhbHNlLFxuICAgICAgICB0aW1lUmVtYWluaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgNTAgLSAoRGF0ZS5ub3coKSAtIHN0YXJ0KSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIDEpO1xuICB9O1xuXG5leHBvcnQgZGVmYXVsdCByZXF1ZXN0SWRsZUNhbGxiYWNrO1xuIiwiLyoqXG4gKiBJbnNwaXJlZCBieSBxdWlja2xpbmsuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vR29vZ2xlQ2hyb21lTGFicy9xdWlja2xpbmtcbiAqL1xuXG5pbXBvcnQgcmVxdWVzdElkbGVDYWxsYmFjayBmcm9tICcuL3JlcXVlc3QtaWRsZS1jYWxsYmFjay5qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVByZWZldGNoTGluayh1cmwpIHtcbiAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcblxuICAvLyBJZiBwcmVmZXRjaCBzdXBwb3J0ZWRcbiAgaWYgKChsaW5rLnJlbExpc3QgfHwge30pLnN1cHBvcnRzICYmICFsaW5rLnJlbExpc3Quc3VwcG9ydHMoJ3ByZWZldGNoJykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsaW5rLnJlbCA9ICdwcmVmZXRjaCc7XG4gIGxpbmsuaHJlZiA9IHVybDtcblxuICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmspO1xufVxuXG5mdW5jdGlvbiBnZXRMaW5rcygpIHtcbiAgLy8gR2V0IGFsbCBsaW5rcyBpbiBtYWluIG5hdlxuICBjb25zdCBsaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1uYXYtbWFpbiBhJyk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5rcy5sZW5ndGg7IGkrKykge1xuICAgIGNyZWF0ZVByZWZldGNoTGluayhsaW5rc1tpXS5ocmVmKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVmZXRjaE5hdigpIHtcbiAgLy8gZG9uJ3QgcHJlZmV0Y2ggaWYgMmcgY29ubmVjdGlvbiBvciBkYXRhLXNhdmVyIGVuYWJsZWRcbiAgaWYgKG5hdmlnYXRvci5jb25uZWN0aW9uICYmIG5hdmlnYXRvci5jb25uZWN0aW9uLnNhdmVEYXRhKSB7XG4gICAgaWYgKFxuICAgICAgbmF2aWdhdG9yLmNvbm5lY3Rpb24uZWZmZWN0aXZlVHlwZS5pbmNsdWRlcygnMmcnKSB8fFxuICAgICAgbmF2aWdhdG9yLmNvbm5lY3Rpb24uc2F2ZURhdGFcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICAvLyBzdGFydCBhcyBzb29uIGFzIHRoZSBicm93c2VyIGlzbid0IGJ1c3kgYW55bW9yZVxuICByZXF1ZXN0SWRsZUNhbGxiYWNrKCgpID0+IHtcbiAgICBnZXRMaW5rcygpO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcHJlZmV0Y2hOYXY7XG4iLCJsZXQgb2JzZXJ2ZXI7XG5cbmZ1bmN0aW9uIGxvYWRJbWFnZShpbWFnZSkge1xuICBjb25zdCBzcmMgPSBpbWFnZS5kYXRhc2V0LnNyYztcbiAgcmV0dXJuIGZldGNoSW1hZ2Uoc3JjKS50aGVuKCgpID0+IHtcbiAgICBpbWFnZS5jbGFzc0xpc3QuYWRkKCdsYXp5bG9hZGVkJyk7XG4gICAgaW1hZ2Uuc3JjID0gc3JjO1xuICAgIGltYWdlLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zcmMnKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZldGNoSW1hZ2UodXJsKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICBpZiAodXJsKSB7XG4gICAgICBpbWFnZS5zcmMgPSB1cmw7XG4gICAgfVxuICAgIGltYWdlLm9ubG9hZCA9IHJlc29sdmU7XG4gICAgaW1hZ2Uub25lcnJvciA9IHJlamVjdDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGltYWdlVmlzaWJsZShlbnRyaWVzKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBlbnRyeSA9IGVudHJpZXNbaV07XG4gICAgaWYgKGVudHJ5LmludGVyc2VjdGlvblJhdGlvID4gMCkge1xuICAgICAgY29uc3QgaW1hZ2UgPSBlbnRyeS50YXJnZXQ7XG4gICAgICBsb2FkSW1hZ2UoaW1hZ2UpO1xuICAgICAgaW1hZ2UuY2xhc3NMaXN0LnJlbW92ZSgnbGF6eScpO1xuXG4gICAgICBvYnNlcnZlci51bm9ic2VydmUoaW1hZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBsYXp5TG9hZChpbWFnZXMpIHtcbiAgaWYgKGltYWdlcy5sZW5ndGgpIHtcbiAgICBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihpbWFnZVZpc2libGUsIHtcbiAgICAgIHJvb3RNYXJnaW46ICcxMDBweCAwcHgnXG4gICAgfSk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGltYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGltYWdlID0gaW1hZ2VzW2ldO1xuICAgICAgaWYgKGltYWdlLmNsYXNzTGlzdC5jb250YWlucygnbGF6eWxvYWRlZCcpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBvYnNlcnZlci5vYnNlcnZlKGltYWdlKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbGF6eUxvYWQ7XG4iLCIvLyBEZW1vc1xuXG5jb25zdCBkZW1vcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1kZW1vJyk7XG5sZXQgZGVtb09ic2VydmVyO1xuXG5mdW5jdGlvbiBkZW1vQWRkQnV0dG9uKGRlbW8pIHtcbiAgY29uc3QgY29udHJvbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29udHJvbHMuY2xhc3NMaXN0LmFkZCgnZGVtb19fY29udHJvbHMnKTtcbiAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIGNvbnN0IGJ1dHRvbl9pbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgYnV0dG9uX2lubmVyLmNsYXNzTGlzdC5hZGQoJ2J0bl9faW5uZXInKTtcbiAgYnV0dG9uX2lubmVyLnRleHRDb250ZW50ID0gJ1JlcGxheSBhbmltYXRpb24nO1xuICBidXR0b24uYXBwZW5kQ2hpbGQoYnV0dG9uX2lubmVyKTtcblxuICBidXR0b24uY2xhc3NMaXN0LmFkZCgnYnRuJyk7XG4gIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdkZW1vX19idG4nKTtcblxuICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICBkZW1vLmNsYXNzTGlzdC5yZW1vdmUoJ2RlbW8tLXBsYXlpbmcnKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGRlbW8uY2xhc3NMaXN0LmFkZCgnZGVtby0tcGxheWluZycpO1xuICAgIH0sIDYwMCk7XG4gIH0pO1xuXG4gIGNvbnRyb2xzLmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gIGRlbW8uYXBwZW5kQ2hpbGQoY29udHJvbHMpO1xufVxuXG5mdW5jdGlvbiBkZW1vVmlzaWJsZShlbnRyaWVzKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBlbnRyeSA9IGVudHJpZXNbaV07XG4gICAgaWYgKGVudHJ5LmludGVyc2VjdGlvblJhdGlvID09PSAxKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZW50cnkudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2RlbW8tLXBsYXlpbmcnKTtcblxuICAgICAgICBkZW1vT2JzZXJ2ZXIudW5vYnNlcnZlKGVudHJ5LnRhcmdldCk7XG4gICAgICB9LCA0MDApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBlbmhhbmNlRGVtb3MoKSB7XG4gIGlmIChkZW1vcy5sZW5ndGgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlbW9zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBkZW1vID0gZGVtb3NbaV07XG4gICAgICBkZW1vQWRkQnV0dG9uKGRlbW8pO1xuXG4gICAgICBkZW1vT2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZGVtb1Zpc2libGUsIHtcbiAgICAgICAgdGhyZXNob2xkOiBbMV1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZGVtby5jbGFzc0xpc3QuY29udGFpbnMoJ2RlbW8tLXBsYXlpbmcnKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZGVtb09ic2VydmVyLm9ic2VydmUoZGVtbyk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGVuaGFuY2VEZW1vcztcbiIsImltcG9ydCBTcXVhcmVzIGZyb20gJy4vc3F1YXJlcyc7XG5pbXBvcnQgcHJlZmV0Y2hOYXYgZnJvbSAnLi9wcmVmZXRjaC1uYXYnO1xuaW1wb3J0IGxhenlMb2FkIGZyb20gJy4vbGF6eWxvYWQnO1xuaW1wb3J0IGVuaGFuY2VEZW1vcyBmcm9tICcuL2RlbW8nO1xucmVxdWlyZSgnZm9jdXMtdmlzaWJsZScpO1xuXG5pZiAoIUVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QpIHtcbiAgRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCA9IGZ1bmN0aW9uKHMpIHtcbiAgICB2YXIgZWwgPSB0aGlzO1xuICAgIGlmICghZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKGVsKSkgcmV0dXJuIG51bGw7XG4gICAgZG8ge1xuICAgICAgaWYgKGVsLm1hdGNoZXMocykpIHJldHVybiBlbDtcbiAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudCB8fCBlbC5wYXJlbnROb2RlO1xuICAgIH0gd2hpbGUgKGVsICE9PSBudWxsICYmIGVsLm5vZGVUeXBlID09PSAxKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxuY29uc3QgaG9tZV90bCA9IG5ldyBTcXVhcmVzKHtcbiAgY2FudmFzOiAnLmpzLXNxLXRsJyxcbiAgbnVtX3g6IDEsXG4gIG51bV95OiAxLFxuICBwYXR0ZXJuOiAnMScsXG4gIGNvbG9yOiAnIzM2QjFCRidcbn0pO1xuXG5jb25zdCBob21lX3RyID0gbmV3IFNxdWFyZXMoe1xuICBjYW52YXM6ICcuanMtc3EtdHInLFxuICBudW1feDogMixcbiAgbnVtX3k6IDEsXG4gIHBhdHRlcm46ICcxLDEnLFxuICBjb2xvcjogJyMzNkIxQkYnXG59KTtcblxuY29uc3QgaG9tZV9iciA9IG5ldyBTcXVhcmVzKHtcbiAgY2FudmFzOiAnLmpzLXNxLWJyJyxcbiAgbnVtX3g6IDEsXG4gIG51bV95OiAyLFxuICBwYXR0ZXJuOiAnMSwxJyxcbiAgY29sb3I6ICcjRjIzQzUwJ1xufSk7XG5cbmNvbnN0IGhvbWVfYmwgPSBuZXcgU3F1YXJlcyh7XG4gIGNhbnZhczogJy5qcy1zcS1ibCcsXG4gIG51bV94OiAyLFxuICBudW1feTogMixcbiAgcGF0dGVybjogJzEsMCwxLDEnLFxuICBjb2xvcjogJyNGMjNDNTAnXG59KTtcblxuY29uc3QgaG9tZV9pbnRybyA9IG5ldyBTcXVhcmVzKHtcbiAgY2FudmFzOiAnLmpzLXNxLWhvbWUtaW50cm8nLFxuICBudW1feDogNixcbiAgbnVtX3k6IDUsXG4gIGNvbG9yOiAnIzU2OGI4ZScsXG4gIHNpemU6IDEwLFxuICBwYXR0ZXJuOiBgMCwwLDEsMSwwLDEsXG4gICAgMCwxLDEsMCwwLDEsXG4gICAgMSwxLDAsMCwwLDEsXG4gICAgMCwxLDEsMCwwLDAsXG4gICAgMCwwLDEsMSwwLDFgXG59KTtcblxuLyoqXG4gKiBSYW5kb20gZW1vamlcbiAqL1xuXG5mdW5jdGlvbiBnZXRSYW5kb21FbW9qaSgpIHtcbiAgY29uc3QgZW1vamlzID0gWyfwn6SkJywgJ/CfkLMnLCAn8J+NuycsICfwn5GK8J+PuycsICfwn42zJ107XG5cbiAgY29uc3QgZW1vamkgPSBlbW9qaXNbTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogKGVtb2ppcy5sZW5ndGggLSAxKSldO1xuICByZXR1cm4gZW1vamk7XG59XG5cbmlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtcmFuZG9tLWVtb2ppJykpIHtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXJhbmRvbS1lbW9qaScpLnRleHRDb250ZW50ID0gZ2V0UmFuZG9tRW1vamkoKTtcbn1cblxuLyoqXG4gKiBTbW9vdGhseSBzY3JvbGwgdG8gdG9wXG4gKi9cblxuaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1zY3JvbGwtdG9wJykpIHtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXNjcm9sbC10b3AnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbG9nbycpLmZvY3VzKCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIFByZWZldGNoIGxpbmtzIGluIG5hdiBmb3IgYmV0dGVyIHBlcmNlaXZlZCBwZXJmb3JtYW5jZVxuICovXG5cbnByZWZldGNoTmF2KCk7XG5cbi8vIGhpc3RvcnkucHVzaFN0YXRlKFxuLy8gICB7IHRoZW1lOiBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC8vZywgJycpIH0sXG4vLyAgIGxvY2F0aW9uLnBhdGhuYW1lLFxuLy8gICBsb2NhdGlvbi5wYXRobmFtZVxuLy8gKTtcblxuLy8gZnVuY3Rpb24gbGlua1Bvc3RsaXN0KCkge1xuLy8gICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuLy8gICBjb25zdCBsaW5rID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJ2EnKTtcbi8vICAgY29uc3QgdGhlbWVDbGFzcyA9IGAke2xpbmsuZGF0YXNldC5wdWJsaWNhdGlvbn0tJHtsaW5rLmRhdGFzZXQucG9zdH1gO1xuLy8gICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRoZW1lJywgdGhlbWVDbGFzcyk7XG4vLyAgIGhpc3RvcnkucHVzaFN0YXRlKHsgdGhlbWU6IHRoZW1lQ2xhc3MgfSwgbGluay5ocmVmLCBsaW5rLmhyZWYpO1xuLy8gICBsb2FkUGFnZShsaW5rLmhyZWYpO1xuLy8gfVxuXG4vLyBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXBvc3QtbGlzdCcpKSB7XG4vLyAgIGRvY3VtZW50XG4vLyAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5qcy1wb3N0LWxpc3QnKVxuLy8gICAgIC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGxpbmtQb3N0bGlzdCk7XG4vLyB9XG5cbi8vIHdpbmRvdy5vbnBvcHN0YXRlID0gZnVuY3Rpb24oZSkge1xuLy8gICBpZiAoZS5zdGF0ZSkge1xuLy8gICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGhlbWUnLCBlLnN0YXRlLnRoZW1lKTtcbi8vICAgICBsb2FkUGFnZShsb2NhdGlvbi5wYXRobmFtZSk7XG4vLyAgIH1cbi8vIH07XG5cbi8vIGZ1bmN0aW9uIGxvYWRQYWdlKHVybCkge1xuLy8gICBjb25zdCBtYWluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXNpdGUtY29udGVudCcpO1xuLy8gICBtYWluLmlubmVySFRNTCA9ICcnO1xuLy8gICBtYWluLmNsYXNzTGlzdC5hZGQoJ3NpdGVfX2NvbnRlbnQtLWhpZGRlbicpO1xuXG4vLyAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbi8vICAgcmVxdWVzdC5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuXG4vLyAgIHJlcXVlc3Qub25sb2FkID0gZnVuY3Rpb24oKSB7XG4vLyAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbi8vICAgICBpZiAodGhpcy5zdGF0dXMgPT09IDIwMCkge1xuLy8gICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IHRoaXMucmVzcG9uc2U7XG4vLyAgICAgICBtYWluLmlubmVySFRNTCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuanMtc2l0ZS1jb250ZW50JykuaW5uZXJIVE1MO1xuLy8gICAgICAgbWFpbi5jbGFzc0xpc3QucmVtb3ZlKCdzaXRlX19jb250ZW50LS1oaWRkZW4nKTtcbi8vICAgICAgIGlmIChtYWluLnF1ZXJ5U2VsZWN0b3IoJy5qcy1wb3N0LWxpc3QnKSkge1xuLy8gICAgICAgICBtYWluXG4vLyAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5qcy1wb3N0LWxpc3QnKVxuLy8gICAgICAgICAgIC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGxpbmtQb3N0bGlzdCk7XG4vLyAgICAgICB9XG5cbi8vICAgICAgIGxhenlMb2FkKG1haW4ucXVlcnlTZWxlY3RvckFsbCgnaW1nW2RhdGEtc3JjXScpKTtcbi8vICAgICB9XG4vLyAgIH07XG5cbi8vICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4vLyAgICAgcGFnZV9jb250ZW50LmlubmVySFRNTCA9XG4vLyAgICAgICBcIkZvciBzb21lIHJlYXNvbiBJIGNvdWxkbid0IGNvbm5lY3QgdG8gdGhlIHNlcnZlciwgcGxlYXNlIHRyeSBsYXRlciBhZ2Fpbi5cIjtcbi8vICAgfTtcblxuLy8gICByZXF1ZXN0LnNlbmQoKTtcbi8vIH1cblxuLy8gTGF6eSBsb2FkIGltYWdlc1xubGF6eUxvYWQoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmxhenknKSk7XG5cbi8qKiBcbiAqIEVuaGFuY2UgZGVtb3Mgd2l0aCBKU1xuICogQWRkcyBcIlJlcGxheVwiIEJ1dHRvblxuICogQWRkcyBJbnRlcnNlY3Rpb24gT2JzZXJ2ZXIgdG8gYXV0byBwbGF5IGFuaW1hdGlvbnMgXG4gKi9cbmVuaGFuY2VEZW1vcygpO1xuXG4vKiogXG4gKiBPcmRlciBkZW1vXG4gKi9cbnZhciBkZW1vcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1hLWZvY3VzLWRlbW8nKTtcbnZhciBhY3RpdmVMaW5rID0gW107XG5mb3IgKGxldCBpID0gMDsgaSA8IGRlbW9zLmxlbmd0aDsgaSsrKSB7XG4gIGFjdGl2ZUxpbmsucHVzaCgwKTtcblxuICAoZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGRlbW8gPSBkZW1vc1tpXTtcbiAgICB2YXIgbGlua3MgPSBkZW1vLnF1ZXJ5U2VsZWN0b3JBbGwoJ2EsIGJ1dHRvbicpO1xuICAgIHZhciBhbmltYXRpbmcgPSBmYWxzZTtcbiAgICB2YXIgZm9jdXNJbnRlcnZhbDtcblxuICAgIHZhciBwbGF5cGF1c2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICB2YXIgcGxheXBhdXNlX2lubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIHBsYXlwYXVzZS5jbGFzc0xpc3QuYWRkKCdidG4nKVxuICAgIHBsYXlwYXVzZV9pbm5lci5jbGFzc0xpc3QuYWRkKCdidG5fX2lubmVyJylcbiAgICBwbGF5cGF1c2UuYXBwZW5kQ2hpbGQocGxheXBhdXNlX2lubmVyKTtcblxuICAgIHZhciBidXR0b25UZXh0QWN0aXZlID0gJ1N0b3AgYW5pbWF0aW9uJztcbiAgICB2YXIgYnV0dG9uVGV4dEluYWN0aXZlID0gJ1BsYXkgYW5pbWF0aW9uJztcblxuICAgIGlmIChkZW1vLmhhc0F0dHJpYnV0ZSgnZGF0YS1idXR0b24nKSkge1xuICAgICAgYnV0dG9uVGV4dEluYWN0aXZlID0gZGVtby5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnV0dG9uJyk7XG4gICAgfVxuXG4gICAgc2V0QnV0dG9uVGV4dChidXR0b25UZXh0SW5hY3RpdmUpO1xuXG4gICAgZGVtby5pbnNlcnRCZWZvcmUocGxheXBhdXNlLCBkZW1vLmZpcnN0Q2hpbGQpO1xuXG4gICAgcGxheXBhdXNlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoYW5pbWF0aW5nKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoZm9jdXNJbnRlcnZhbClcbiAgICAgICAgcGxheXBhdXNlLnRleHRDb250ZW50ID0gYnV0dG9uVGV4dEluYWN0aXZlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlua3NbYWN0aXZlTGlua1tpXV0uZm9jdXMoKTtcblxuICAgICAgICBmb2N1c0ludGVydmFsID0gd2luZG93LnNldEludGVydmFsKGZvY3VzTmV4dCwgNzAwKTtcbiAgICAgICAgc2V0QnV0dG9uVGV4dChidXR0b25UZXh0QWN0aXZlKTtcbiAgICAgIH0gIFxuICAgICAgXG4gICAgICBhbmltYXRpbmcgPSAhYW5pbWF0aW5nO1xuICAgIH0pO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBsaW5rcy5sZW5ndGg7IGorKykge1xuICAgICAgbGlua3Nbal0uYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2EtZ3JpZC1vcmRlcl9fbGluay0tbWlzbWF0Y2gnKSkge1xuICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2EtZ3JpZC1vcmRlcl9fbGluay0tZGFuZ2xlJylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRCdXR0b25UZXh0KHRleHQpIHtcbiAgICAgIHBsYXlwYXVzZV9pbm5lci50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9jdXNOZXh0KCkgeyAgXG4gICAgICBpZiAoYWN0aXZlTGlua1tpXSA8IGxpbmtzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBhY3RpdmVMaW5rW2ldKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWN0aXZlTGlua1tpXSA9IDA7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChmb2N1c0ludGVydmFsKTtcbiAgICAgICAgICBzZXRCdXR0b25UZXh0KGJ1dHRvblRleHRJbmFjdGl2ZSk7XG4gICAgICAgICAgYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgbGlua3NbYWN0aXZlTGlua1tpXV0uZm9jdXMoKTtcbiAgICB9XG4gIH0pKGkpXG59XG5cblxuIl0sInNvdXJjZVJvb3QiOiIifQ==