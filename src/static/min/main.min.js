!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){n(3),e.exports=n(2)},function(e,t,n){!function(){"use strict";"undefined"!=typeof document&&function(e){var t;function n(){t||(t=!0,e())}["interactive","complete"].indexOf(document.readyState)>=0?e():(t=!1,document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1))}(function(){var e=!0,t=!1,n=null,o={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function i(e){return!!(e&&e!==document&&"HTML"!==e.nodeName&&"BODY"!==e.nodeName&&"classList"in e&&"contains"in e.classList)}function s(e){e.classList.contains("focus-visible")||(e.classList.add("focus-visible"),e.setAttribute("data-focus-visible-added",""))}function a(t){e=!1}function r(){document.addEventListener("mousemove",c),document.addEventListener("mousedown",c),document.addEventListener("mouseup",c),document.addEventListener("pointermove",c),document.addEventListener("pointerdown",c),document.addEventListener("pointerup",c),document.addEventListener("touchmove",c),document.addEventListener("touchstart",c),document.addEventListener("touchend",c)}function c(t){"html"!==t.target.nodeName.toLowerCase()&&(e=!1,document.removeEventListener("mousemove",c),document.removeEventListener("mousedown",c),document.removeEventListener("mouseup",c),document.removeEventListener("pointermove",c),document.removeEventListener("pointerdown",c),document.removeEventListener("pointerup",c),document.removeEventListener("touchmove",c),document.removeEventListener("touchstart",c),document.removeEventListener("touchend",c))}document.addEventListener("keydown",function(t){i(document.activeElement)&&s(document.activeElement),e=!0},!0),document.addEventListener("mousedown",a,!0),document.addEventListener("pointerdown",a,!0),document.addEventListener("touchstart",a,!0),document.addEventListener("focus",function(t){var n,a,r;i(t.target)&&((e||(n=t.target,a=n.type,"INPUT"==(r=n.tagName)&&o[a]&&!n.readOnly||"TEXTAREA"==r&&!n.readOnly||n.isContentEditable))&&s(t.target))},!0),document.addEventListener("blur",function(e){var o;i(e.target)&&((e.target.classList.contains("focus-visible")||e.target.hasAttribute("data-focus-visible-added"))&&(t=!0,window.clearTimeout(n),n=window.setTimeout(function(){t=!1,window.clearTimeout(n)},100),(o=e.target).hasAttribute("data-focus-visible-added")&&(o.classList.remove("focus-visible"),o.removeAttribute("data-focus-visible-added"))))},!0),document.addEventListener("visibilitychange",function(n){"hidden"==document.visibilityState&&(t&&(e=!0),r())},!0),r(),document.body.classList.add("js-focus-visible")})}()},function(e,t,n){},function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}n.r(t);var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=t,this.canvas=document.querySelector(t.canvas),this.canvas&&(this.context=this.canvas.getContext("2d"),this.color="red",this.size=this.prop_set(t.size,20),this.num_x=t.num_x,this.num_y=t.num_y,this.init_canvas())}var t,n,i;return t=e,(n=[{key:"init_canvas",value:function(){if(this.prepare_canvas(),this.attach_events(),this.options.pattern&&this.parse_pattern(),this.options.fill){for(var e=Math.round(this.get_parent_width()/this.size/2),t=0;t<e;t++)this.squares.push({x:this.size*(2*t),y:0});this.draw_squares()}}},{key:"attach_events",value:function(){this.place_square=this.place_square.bind(this),this.canvas.addEventListener("click",this.place_square)}},{key:"place_square",value:function(e){this.context.clearRect(0,0,this.canvas.width,this.canvas.height);var t=e.pageX-e.target.offsetLeft,n=e.pageY-e.target.offsetTop,o=t-t%this.size,i=n-n%this.size;i===this.canvas.height&&(i-=this.size),o===this.canvas.width&&(o-=this.size);var s=this.squares.findIndex(function(e){return e.x===o&e.y===i});s>-1?this.squares.splice(s,1):this.squares.push({x:o,y:i}),this.draw_squares(this.context,this.squares)}},{key:"prop_set",value:function(e,t){return e||t}},{key:"prepare_canvas",value:function(){this.canvas.classList.add("square-canvas--visible"),this.canvas.width=this.num_x*this.size,this.canvas.height=this.num_y*this.size,"infinite"===this.num_x&&(this.canvas.width=this.get_parent_width()),this.squares=[]}},{key:"get_parent_width",value:function(){var e=getComputedStyle(this.canvas.parentNode),t=this.canvas.parentNode.clientWidth;return t-=parseFloat(e.paddingLeft)+parseFloat(e.paddingRight)}},{key:"parse_pattern",value:function(){for(var e=this.options.pattern.split(","),t=0;t<e.length;t++){var n=parseInt(e[t].trim()),o=Math.floor(t/this.num_x),i=(t+this.num_x)%this.num_x;"infinite"===this.num_x&&(o=0,i=t),n&&this.squares.push({x:this.size*i,y:this.size*o})}this.draw_squares()}},{key:"draw_squares",value:function(){this.context.fillStyle=this.prop_set(this.options.color,"rgba(51, 51, 51, 0.9)");for(var e=0;e<this.squares.length;e++){var t=this.squares[e];this.context.fillRect(t.x,t.y,this.size,this.size)}}}])&&o(t.prototype,n),i&&o(t,i),e}(),s=s||function(e){var t=Date.now();return setTimeout(function(){e({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-t))}})},1)},a=s;var r,c=function(){navigator.connection&&navigator.connection.saveData&&(navigator.connection.effectiveType.includes("2g")||navigator.connection.saveData)||a(function(){!function(){for(var e,t,n=document.querySelectorAll(".js-nav-main a"),o=0;o<n.length;o++)e=n[o].href,t=void 0,((t=document.createElement("link")).relList||{}).supports&&!t.relList.supports("prefetch")||(t.rel="prefetch",t.href=e,document.head.appendChild(t))}()})};function u(e){var t,n=e.dataset.src;return(t=n,new Promise(function(e,n){var o=new Image;o.src=t,o.onload=e,o.onerror=n})).then(function(){e.classList.add("lazyloaded"),e.src=n,e.removeAttribute("data-src")})}function d(e){for(var t=0;t<e.length;t++){var n=e[t];n.intersectionRatio>0&&(r.unobserve(n.target),u(n.target))}}var l=function(e){if(e.length){r=new IntersectionObserver(d,{rootMargin:"100px 0px"});for(var t=0;t<e.length;t++){var n=e[t];n.classList.contains("lazyloaded")||r.observe(n)}}};n(1),Element.prototype.closest||(Element.prototype.closest=function(e){var t=this;if(!document.documentElement.contains(t))return null;do{if(t.matches(e))return t;t=t.parentElement||t.parentNode}while(null!==t&&1===t.nodeType);return null});var m;new i({canvas:".js-sq-tl",num_x:1,num_y:1,pattern:"1",color:"#36B1BF"}),new i({canvas:".js-sq-tr",num_x:2,num_y:1,pattern:"1,1",color:"#36B1BF"}),new i({canvas:".js-sq-br",num_x:1,num_y:2,pattern:"1,1",color:"#F23C50"}),new i({canvas:".js-sq-bl",num_x:2,num_y:2,pattern:"1,0,1,1",color:"#F23C50"}),new i({canvas:".js-sq-home-intro",num_x:6,num_y:5,color:"#568b8e",size:10,pattern:"0,0,1,1,0,1,\n    0,1,1,0,0,1,\n    1,1,0,0,0,1,\n    0,1,1,0,0,0,\n    0,0,1,1,0,1"}),new i({canvas:".js-sq-site-header",num_x:"infinite",num_y:1,size:5,color:"#1d4e6d",fill:"even"});function v(){event.preventDefault();var e=event.target.closest("a"),t="".concat(e.dataset.publication,"-").concat(e.dataset.post);document.documentElement.setAttribute("data-theme",t),history.pushState({theme:t},e.href,e.href),h(e.href)}function h(e){var t=document.querySelector(".js-site-content");t.innerHTML="",t.classList.add("site__content--hidden");var n=new XMLHttpRequest;n.open("GET",e,!0),n.onload=function(){var e=document.createElement("div");200===this.status&&(e.innerHTML=this.response,t.innerHTML=e.querySelector(".js-site-content").innerHTML,t.classList.remove("site__content--hidden"),t.querySelector(".js-post-list")&&t.querySelector(".js-post-list").addEventListener("click",v),l(t.querySelectorAll("img[data-src]")))},n.onerror=function(){page_content.innerHTML="For some reason I couldn't connect to the server, please try later again."},n.send()}document.querySelector(".js-random-emoji")&&(document.querySelector(".js-random-emoji").textContent=(m=["🤤","🐳","🍻","👊🏻","🍳"])[Math.round(Math.random()*(m.length-1))]),document.querySelector(".js-scroll-top")&&document.querySelector(".js-scroll-top").addEventListener("click",function(e){e.preventDefault(),document.querySelector(".js-logo").focus()}),c(),history.pushState({theme:location.pathname.replace(/\//g,"")},location.pathname,location.pathname),document.querySelector(".js-post-list")&&document.querySelector(".js-post-list").addEventListener("click",v),window.onpopstate=function(e){e.state&&(document.documentElement.setAttribute("data-theme",e.state.theme),h(location.pathname))},l(document.querySelectorAll("img[data-src]"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZvY3VzLXZpc2libGUvZGlzdC9mb2N1cy12aXNpYmxlLmpzIiwid2VicGFjazovLy8uL3NyYy9zdGF0aWMvc2NyaXB0cy9zcXVhcmVzLmpzIiwid2VicGFjazovLy8uL3NyYy9zdGF0aWMvc2NyaXB0cy9yZXF1ZXN0LWlkbGUtY2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXRpYy9zY3JpcHRzL3ByZWZldGNoLW5hdi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGljL3NjcmlwdHMvbGF6eWxvYWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXRpYy9zY3JpcHRzL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZG9jdW1lbnQiLCJjYWxsYmFjayIsImxvYWRlZCIsImxvYWQiLCJpbmRleE9mIiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3aW5kb3ciLCJvbkRPTVJlYWR5IiwiaGFkS2V5Ym9hcmRFdmVudCIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0IiwiaW5wdXRUeXBlc1doaXRlbGlzdCIsInRleHQiLCJzZWFyY2giLCJ1cmwiLCJ0ZWwiLCJlbWFpbCIsInBhc3N3b3JkIiwibnVtYmVyIiwiZGF0ZSIsIm1vbnRoIiwid2VlayIsInRpbWUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiaXNWYWxpZEZvY3VzVGFyZ2V0IiwiZWwiLCJub2RlTmFtZSIsImNsYXNzTGlzdCIsImFkZEZvY3VzVmlzaWJsZUNsYXNzIiwiY29udGFpbnMiLCJhZGQiLCJzZXRBdHRyaWJ1dGUiLCJvblBvaW50ZXJEb3duIiwiZSIsImFkZEluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycyIsIm9uSW5pdGlhbFBvaW50ZXJNb3ZlIiwidGFyZ2V0IiwidG9Mb3dlckNhc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWN0aXZlRWxlbWVudCIsInR5cGUiLCJ0YWdOYW1lIiwicmVhZE9ubHkiLCJpc0NvbnRlbnRFZGl0YWJsZSIsImhhc0F0dHJpYnV0ZSIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJyZW1vdmUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ2aXNpYmlsaXR5U3RhdGUiLCJib2R5IiwiZmFjdG9yeSIsIlNxdWFyZXMiLCJvcHRpb25zIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsImNhbnZhcyIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsImNvbG9yIiwic2l6ZSIsInByb3Bfc2V0IiwibnVtX3giLCJudW1feSIsImluaXRfY2FudmFzIiwicHJlcGFyZV9jYW52YXMiLCJhdHRhY2hfZXZlbnRzIiwicGF0dGVybiIsInBhcnNlX3BhdHRlcm4iLCJmaWxsIiwibnVtX2JveGVzIiwiTWF0aCIsInJvdW5kIiwiZ2V0X3BhcmVudF93aWR0aCIsInNxdWFyZXMiLCJwdXNoIiwieCIsInkiLCJkcmF3X3NxdWFyZXMiLCJwbGFjZV9zcXVhcmUiLCJjbGVhclJlY3QiLCJ3aWR0aCIsImhlaWdodCIsInhfcmF3IiwicGFnZVgiLCJvZmZzZXRMZWZ0IiwieV9yYXciLCJwYWdlWSIsIm9mZnNldFRvcCIsImluZGV4IiwiZmluZEluZGV4IiwicG9zIiwic3BsaWNlIiwicHJvcCIsInBhcmVudF9zdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwicGFyZW50Tm9kZSIsInBhcmVudF93aWR0aCIsImNsaWVudFdpZHRoIiwicGFyc2VGbG9hdCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0Iiwic3BsaXQiLCJsZW5ndGgiLCJib3giLCJwYXJzZUludCIsInRyaW0iLCJyb3ciLCJmbG9vciIsImNvbCIsImZpbGxTdHlsZSIsInNxdWFyZSIsImZpbGxSZWN0IiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNiIiwic3RhcnQiLCJEYXRlIiwibm93IiwiZGlkVGltZW91dCIsInRpbWVSZW1haW5pbmciLCJtYXgiLCJwcmVmZXRjaE5hdiIsIm9ic2VydmVyIiwibmF2aWdhdG9yIiwiY29ubmVjdGlvbiIsInNhdmVEYXRhIiwiZWZmZWN0aXZlVHlwZSIsImluY2x1ZGVzIiwibGluayIsImxpbmtzIiwicXVlcnlTZWxlY3RvckFsbCIsImhyZWYiLCJjcmVhdGVFbGVtZW50IiwicmVsTGlzdCIsInN1cHBvcnRzIiwicmVsIiwiaGVhZCIsImFwcGVuZENoaWxkIiwiZ2V0TGlua3MiLCJsb2FkSW1hZ2UiLCJpbWFnZSIsInNyYyIsImRhdGFzZXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIkltYWdlIiwib25sb2FkIiwib25lcnJvciIsInRoZW4iLCJpbWFnZVZpc2libGUiLCJlbnRyaWVzIiwiZW50cnkiLCJpbnRlcnNlY3Rpb25SYXRpbyIsInVub2JzZXJ2ZSIsImxhenlMb2FkIiwiaW1hZ2VzIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJyb290TWFyZ2luIiwib2JzZXJ2ZSIsInJlcXVpcmUiLCJFbGVtZW50IiwiY2xvc2VzdCIsImRvY3VtZW50RWxlbWVudCIsIm1hdGNoZXMiLCJwYXJlbnRFbGVtZW50Iiwibm9kZVR5cGUiLCJlbW9qaXMiLCJsaW5rUG9zdGxpc3QiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwidGhlbWVDbGFzcyIsImNvbmNhdCIsInB1YmxpY2F0aW9uIiwicG9zdCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJ0aGVtZSIsImxvYWRQYWdlIiwibWFpbiIsImlubmVySFRNTCIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJjb250YWluZXIiLCJzdGF0dXMiLCJyZXNwb25zZSIsInBhZ2VfY29udGVudCIsInNlbmQiLCJ0ZXh0Q29udGVudCIsInJhbmRvbSIsImZvY3VzIiwibG9jYXRpb24iLCJwYXRobmFtZSIsInJlcGxhY2UiLCJvbnBvcHN0YXRlIiwic3RhdGUiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxZQUFBLENBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0EsR0FGQTFCLEVBQUFrQixFQUFBTyxHQUNBWCxPQUFBQyxlQUFBVSxFQUFBLFdBQXlDVCxZQUFBLEVBQUFLLFVBQ3pDLEVBQUFFLEdBQUEsaUJBQUFGLEVBQUEsUUFBQU0sS0FBQU4sRUFBQXJCLEVBQUFVLEVBQUFlLEVBQUFFLEVBQUEsU0FBQUEsR0FBZ0gsT0FBQU4sRUFBQU0sSUFBcUJDLEtBQUEsS0FBQUQsSUFDckksT0FBQUYsR0FJQXpCLEVBQUE2QixFQUFBLFNBQUExQixHQUNBLElBQUFTLEVBQUFULEtBQUFxQixXQUNBLFdBQTJCLE9BQUFyQixFQUFBLFNBQzNCLFdBQWlDLE9BQUFBLEdBRWpDLE9BREFILEVBQUFVLEVBQUFFLEVBQUEsSUFBQUEsR0FDQUEsR0FJQVosRUFBQWEsRUFBQSxTQUFBaUIsRUFBQUMsR0FBc0QsT0FBQWpCLE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQXVCLEVBQUFDLElBR3REL0IsRUFBQWtDLEVBQUEsR0FJQWxDLElBQUFtQyxFQUFBLDJEQzlFQyxXQUFxQixhQWlSdEIsb0JBQUFDLFVBdkJBLFNBQUFDLEdBQ0EsSUFBQUMsRUFLQSxTQUFBQyxJQUNBRCxJQUNBQSxHQUFBLEVBRUFELEtBSUEsMkJBQUFHLFFBQUFKLFNBQUFLLGFBQUEsRUFDQUosS0FFQUMsR0FBQSxFQUNBRixTQUFBTSxpQkFBQSxtQkFBQUgsR0FBQSxHQUNBSSxPQUFBRCxpQkFBQSxPQUFBSCxHQUFBLElBS0FLLENBN1FBLFdBQ0EsSUFBQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEVBQUEsS0FFQUMsRUFBQSxDQUNBQyxNQUFBLEVBQ0FDLFFBQUEsRUFDQUMsS0FBQSxFQUNBQyxLQUFBLEVBQ0FDLE9BQUEsRUFDQUMsVUFBQSxFQUNBQyxRQUFBLEVBQ0FDLE1BQUEsRUFDQUMsT0FBQSxFQUNBQyxNQUFBLEVBQ0FDLE1BQUEsRUFDQUMsVUFBQSxFQUNBQyxrQkFBQSxHQVFBLFNBQUFDLEVBQUFDLEdBQ0EsU0FDQUEsR0FDQUEsSUFBQTNCLFVBQ0EsU0FBQTJCLEVBQUFDLFVBQ0EsU0FBQUQsRUFBQUMsVUFDQSxjQUFBRCxHQUNBLGFBQUFBLEVBQUFFLFdBc0NBLFNBQUFDLEVBQUFILEdBQ0FBLEVBQUFFLFVBQUFFLFNBQUEsbUJBR0FKLEVBQUFFLFVBQUFHLElBQUEsaUJBQ0FMLEVBQUFNLGFBQUEsZ0NBc0NBLFNBQUFDLEVBQUFDLEdBQ0ExQixHQUFBLEVBd0VBLFNBQUEyQixJQUNBcEMsU0FBQU0saUJBQUEsWUFBQStCLEdBQ0FyQyxTQUFBTSxpQkFBQSxZQUFBK0IsR0FDQXJDLFNBQUFNLGlCQUFBLFVBQUErQixHQUNBckMsU0FBQU0saUJBQUEsY0FBQStCLEdBQ0FyQyxTQUFBTSxpQkFBQSxjQUFBK0IsR0FDQXJDLFNBQUFNLGlCQUFBLFlBQUErQixHQUNBckMsU0FBQU0saUJBQUEsWUFBQStCLEdBQ0FyQyxTQUFBTSxpQkFBQSxhQUFBK0IsR0FDQXJDLFNBQUFNLGlCQUFBLFdBQUErQixHQXNCQSxTQUFBQSxFQUFBRixHQUdBLFNBQUFBLEVBQUFHLE9BQUFWLFNBQUFXLGdCQUlBOUIsR0FBQSxFQXpCQVQsU0FBQXdDLG9CQUFBLFlBQUFILEdBQ0FyQyxTQUFBd0Msb0JBQUEsWUFBQUgsR0FDQXJDLFNBQUF3QyxvQkFBQSxVQUFBSCxHQUNBckMsU0FBQXdDLG9CQUFBLGNBQUFILEdBQ0FyQyxTQUFBd0Msb0JBQUEsY0FBQUgsR0FDQXJDLFNBQUF3QyxvQkFBQSxZQUFBSCxHQUNBckMsU0FBQXdDLG9CQUFBLFlBQUFILEdBQ0FyQyxTQUFBd0Msb0JBQUEsYUFBQUgsR0FDQXJDLFNBQUF3QyxvQkFBQSxXQUFBSCxJQXFCQXJDLFNBQUFNLGlCQUFBLFVBbklBLFNBQUE2QixHQUNBVCxFQUFBMUIsU0FBQXlDLGdCQUNBWCxFQUFBOUIsU0FBQXlDLGVBR0FoQyxHQUFBLElBOEhBLEdBQ0FULFNBQUFNLGlCQUFBLFlBQUE0QixHQUFBLEdBQ0FsQyxTQUFBTSxpQkFBQSxjQUFBNEIsR0FBQSxHQUNBbEMsU0FBQU0saUJBQUEsYUFBQTRCLEdBQUEsR0FDQWxDLFNBQUFNLGlCQUFBLFFBNUdBLFNBQUE2QixHQTlFQSxJQUFBUixFQUNBZSxFQUNBQyxFQThFQWpCLEVBQUFTLEVBQUFHLFdBSUE3QixJQXBGQWtCLEVBb0ZBUSxFQUFBRyxPQW5GQUksRUFBQWYsRUFBQWUsS0FHQSxVQUZBQyxFQUFBaEIsRUFBQWdCLFVBRUEvQixFQUFBOEIsS0FBQWYsRUFBQWlCLFVBSUEsWUFBQUQsSUFBQWhCLEVBQUFpQixVQUlBakIsRUFBQWtCLHFCQXlFQWYsRUFBQUssRUFBQUcsV0FxR0EsR0FDQXRDLFNBQUFNLGlCQUFBLE9BOUZBLFNBQUE2QixHQXhEQSxJQUFBUixFQXlEQUQsRUFBQVMsRUFBQUcsV0FLQUgsRUFBQUcsT0FBQVQsVUFBQUUsU0FBQSxrQkFDQUksRUFBQUcsT0FBQVEsYUFBQSwrQkFNQXBDLEdBQUEsRUFDQUgsT0FBQXdDLGFBQUFwQyxHQUNBQSxFQUFBSixPQUFBeUMsV0FBQSxXQUNBdEMsR0FBQSxFQUNBSCxPQUFBd0MsYUFBQXBDLElBQ1MsTUExRVRnQixFQTJFQVEsRUFBQUcsUUExRUFRLGFBQUEsOEJBR0FuQixFQUFBRSxVQUFBb0IsT0FBQSxpQkFDQXRCLEVBQUF1QixnQkFBQSxpQ0FpSkEsR0FDQWxELFNBQUFNLGlCQUFBLG1CQW5FQSxTQUFBNkIsR0FDQSxVQUFBbkMsU0FBQW1ELGtCQUtBekMsSUFDQUQsR0FBQSxHQUVBMkIsT0EwREEsR0FDQUEsSUFFQXBDLFNBQUFvRCxLQUFBdkIsVUFBQUcsSUFBQSxzQkF0UDhEcUIsb09DNkgvQ0MsYUE3SGIsU0FBQUEsRUFBWUMsZ0dBQVNDLENBQUFDLEtBQUFILEdBQ25CRyxLQUFLRixRQUFVQSxFQUVmRSxLQUFLQyxPQUFTMUQsU0FBUzJELGNBQWNKLEVBQVFHLFFBRXhDRCxLQUFLQyxTQUVWRCxLQUFLRyxRQUFVSCxLQUFLQyxPQUFPRyxXQUFXLE1BQ3RDSixLQUFLSyxNQUFPLE1BRVpMLEtBQUtNLEtBQU9OLEtBQUtPLFNBQVNULEVBQVFRLEtBQU0sSUFFeENOLEtBQUtRLE1BQVFWLEVBQVFVLE1BQ3JCUixLQUFLUyxNQUFRWCxFQUFRVyxNQUVyQlQsS0FBS1UsNEVBV0wsR0FQQVYsS0FBS1csaUJBQ0xYLEtBQUtZLGdCQUVEWixLQUFLRixRQUFRZSxTQUNmYixLQUFLYyxnQkFHSGQsS0FBS0YsUUFBUWlCLEtBQU0sQ0FHckIsSUFGQSxJQUFNQyxFQUFZQyxLQUFLQyxNQUFNbEIsS0FBS21CLG1CQUFxQm5CLEtBQUtNLEtBQU8sR0FFMUQvRixFQUFJLEVBQUdBLEVBQUl5RyxFQUFXekcsSUFDN0J5RixLQUFLb0IsUUFBUUMsS0FBSyxDQUFFQyxFQUFHdEIsS0FBS00sTUFBUSxFQUFJL0YsR0FBSWdILEVBQUcsSUFHakR2QixLQUFLd0Isd0RBS1B4QixLQUFLeUIsYUFBZXpCLEtBQUt5QixhQUFhMUYsS0FBS2lFLE1BQzNDQSxLQUFLQyxPQUFPcEQsaUJBQWlCLFFBQVNtRCxLQUFLeUIsbURBR2hDL0MsR0FDWHNCLEtBQUtHLFFBQVF1QixVQUFVLEVBQUcsRUFBRzFCLEtBQUtDLE9BQU8wQixNQUFPM0IsS0FBS0MsT0FBTzJCLFFBRTFELElBQU1DLEVBQVFuRCxFQUFFb0QsTUFBUXBELEVBQUVHLE9BQU9rRCxXQUMzQkMsRUFBUXRELEVBQUV1RCxNQUFRdkQsRUFBRUcsT0FBT3FELFVBRTdCWixFQUFJTyxFQUFRQSxFQUFRN0IsS0FBS00sS0FDekJpQixFQUFJUyxFQUFRQSxFQUFRaEMsS0FBS00sS0FFekJpQixJQUFNdkIsS0FBS0MsT0FBTzJCLFNBQ3BCTCxHQUFLdkIsS0FBS00sTUFFUmdCLElBQU10QixLQUFLQyxPQUFPMEIsUUFDcEJMLEdBQUt0QixLQUFLTSxNQUdaLElBQU02QixFQUFRbkMsS0FBS29CLFFBQVFnQixVQUFVLFNBQUFDLEdBQUcsT0FBSUEsRUFBSWYsSUFBTUEsRUFBSWUsRUFBSWQsSUFBTUEsSUFFaEVZLEdBQVMsRUFDWG5DLEtBQUtvQixRQUFRa0IsT0FBT0gsRUFBTyxHQUUzQm5DLEtBQUtvQixRQUFRQyxLQUFLLENBQUVDLEVBQUdBLEVBQUdDLEVBQUdBLElBRy9CdkIsS0FBS3dCLGFBQWF4QixLQUFLRyxRQUFTSCxLQUFLb0IsMENBR2hDbUIsRUFBTS9HLEdBQ2IsT0FBTytHLEdBQWMvRywyQ0FJckJ3RSxLQUFLQyxPQUFPN0IsVUFBVUcsSUFBSSwwQkFFMUJ5QixLQUFLQyxPQUFPMEIsTUFBUTNCLEtBQUtRLE1BQVFSLEtBQUtNLEtBQ3RDTixLQUFLQyxPQUFPMkIsT0FBUzVCLEtBQUtTLE1BQVFULEtBQUtNLEtBRXBCLGFBQWZOLEtBQUtRLFFBQ1BSLEtBQUtDLE9BQU8wQixNQUFRM0IsS0FBS21CLG9CQUczQm5CLEtBQUtvQixRQUFVLDhDQUlmLElBQU1vQixFQUFnQkMsaUJBQWlCekMsS0FBS0MsT0FBT3lDLFlBQy9DQyxFQUFlM0MsS0FBS0MsT0FBT3lDLFdBQVdFLFlBRzFDLE9BRkFELEdBQWdCRSxXQUFXTCxFQUFjTSxhQUFlRCxXQUFXTCxFQUFjTyxzREFRakYsSUFGQSxJQUFNbEMsRUFBVWIsS0FBS0YsUUFBUWUsUUFBUW1DLE1BQU0sS0FFbEN6SSxFQUFJLEVBQUdBLEVBQUlzRyxFQUFRb0MsT0FBUTFJLElBQUssQ0FDdkMsSUFBTTJJLEVBQU1DLFNBQVN0QyxFQUFRdEcsR0FBRzZJLFFBQzVCQyxFQUFNcEMsS0FBS3FDLE1BQU0vSSxFQUFJeUYsS0FBS1EsT0FDMUIrQyxHQUFPaEosRUFBSXlGLEtBQUtRLE9BQVNSLEtBQUtRLE1BRWYsYUFBZlIsS0FBS1EsUUFDUDZDLEVBQU0sRUFDTkUsRUFBTWhKLEdBR0oySSxHQUNGbEQsS0FBS29CLFFBQVFDLEtBQUssQ0FBRUMsRUFBR3RCLEtBQUtNLEtBQU9pRCxFQUFLaEMsRUFBR3ZCLEtBQUtNLEtBQU8rQyxJQUkzRHJELEtBQUt3QixzREFJTHhCLEtBQUtHLFFBQVFxRCxVQUFZeEQsS0FBS08sU0FBU1AsS0FBS0YsUUFBUU8sTUFBTyx5QkFFM0QsSUFBSSxJQUFJOUYsRUFBSSxFQUFHQSxFQUFJeUYsS0FBS29CLFFBQVE2QixPQUFRMUksSUFBSyxDQUMzQyxJQUFNa0osRUFBU3pELEtBQUtvQixRQUFRN0csR0FDNUJ5RixLQUFLRyxRQUFRdUQsU0FBU0QsRUFBT25DLEVBQUdtQyxFQUFPbEMsRUFBR3ZCLEtBQUtNLEtBQU1OLEtBQUtNLDRDQ3pIMURxRCxFQUFzQkEsR0FDMUIsU0FBVUMsR0FDUixJQUFNQyxFQUFRQyxLQUFLQyxNQUNuQixPQUFPeEUsV0FBVyxXQUNoQnFFLEVBQUcsQ0FDREksWUFBWSxFQUNaQyxjQUFlLFdBQ2IsT0FBT2hELEtBQUtpRCxJQUFJLEVBQUcsSUFBTUosS0FBS0MsTUFBUUYsUUFHekMsSUFHUUYsSUNnQ0FRLElDN0NYQyxFRDZDV0QsRUFmZixXQUVNRSxVQUFVQyxZQUFjRCxVQUFVQyxXQUFXQyxXQUMzQ0YsVUFBVUMsV0FBV0UsY0FBY0MsU0FBUyxPQUFTSixVQUFVQyxXQUFXQyxXQU9oRlosRUFBb0IsWUFuQnRCLFdBSUUsSUFGQSxJQWhCMEJyRyxFQUNwQm9ILEVBZUFDLEVBQVFwSSxTQUFTcUksaUJBQWlCLGtCQUVoQ3JLLEVBQUksRUFBR0EsRUFBSW9LLEVBQU0xQixPQUFRMUksSUFsQlArQyxFQW1CTHFILEVBQU1wSyxHQUFHc0ssS0FsQnhCSCxhQUFPbkksU0FBU3VJLGNBQWMsU0FHMUJDLFNBQVcsSUFBSUMsV0FBYU4sRUFBS0ssUUFBUUMsU0FBUyxjQUk1RE4sRUFBS08sSUFBTSxXQUNYUCxFQUFLRyxLQUFPdkgsRUFFWmYsU0FBUzJJLEtBQUtDLFlBQVlULElBdUJ4QlUsTUN2Q0osU0FBU0MsRUFBVUMsR0FDakIsSUFRa0JoSSxFQVJaaUksRUFBTUQsRUFBTUUsUUFBUUQsSUFDMUIsT0FPa0JqSSxFQVBBaUksRUFRWCxJQUFJRSxRQUFRLFNBQUNDLEVBQVNDLEdBQzNCLElBQU1MLEVBQVEsSUFBSU0sTUFDbEJOLEVBQU1DLElBQU1qSSxFQUNaZ0ksRUFBTU8sT0FBU0gsRUFDZkosRUFBTVEsUUFBVUgsS0FaS0ksS0FBSyxXQUMxQlQsRUFBTWxILFVBQVVHLElBQUksY0FDcEIrRyxFQUFNQyxJQUFNQSxFQUNaRCxFQUFNN0YsZ0JBQWdCLGNBYTFCLFNBQVN1RyxFQUFhQyxHQUNwQixJQUFLLElBQUkxTCxFQUFJLEVBQUdBLEVBQUkwTCxFQUFRaEQsT0FBUTFJLElBQUssQ0FDdkMsSUFBSTJMLEVBQVFELEVBQVExTCxHQUNoQjJMLEVBQU1DLGtCQUFvQixJQUM1Qi9CLEVBQVNnQyxVQUFVRixFQUFNckgsUUFDekJ3RyxFQUFVYSxFQUFNckgsVUFvQlB3SCxNQWZmLFNBQWtCQyxHQUNoQixHQUFJQSxFQUFPckQsT0FBUSxDQUNqQm1CLEVBQVcsSUFBSW1DLHFCQUFxQlAsRUFBYyxDQUFFUSxXQUFZLGNBRWhFLElBQUssSUFBSWpNLEVBQUksRUFBR0EsRUFBSStMLEVBQU9yRCxPQUFRMUksSUFBSyxDQUN0QyxJQUFJK0ssRUFBUWdCLEVBQU8vTCxHQUNmK0ssRUFBTWxILFVBQVVFLFNBQVMsZUFJN0I4RixFQUFTcUMsUUFBUW5CLE1DckN2Qm9CLEVBQVEsR0FFSEMsUUFBUXhLLFVBQVV5SyxVQUNyQkQsUUFBUXhLLFVBQVV5SyxRQUFVLFNBQVN0SyxHQUNuQyxJQUFJNEIsRUFBSzhCLEtBQ1QsSUFBS3pELFNBQVNzSyxnQkFBZ0J2SSxTQUFTSixHQUFLLE9BQU8sS0FDbkQsRUFBRyxDQUNELEdBQUlBLEVBQUc0SSxRQUFReEssR0FBSSxPQUFPNEIsRUFDMUJBLEVBQUtBLEVBQUc2SSxlQUFpQjdJLEVBQUd3RSxpQkFDZCxPQUFQeEUsR0FBK0IsSUFBaEJBLEVBQUc4SSxVQUMzQixPQUFPLE9BSVgsSUEyRFFDLEVBM0RRLElBQUlwSCxFQUFRLENBQzFCSSxPQUFRLFlBQ1JPLE1BQU8sRUFDUEMsTUFBTyxFQUNQSSxRQUFTLElBQ1RSLE1BQU8sWUFHTyxJQUFJUixFQUFRLENBQzFCSSxPQUFRLFlBQ1JPLE1BQU8sRUFDUEMsTUFBTyxFQUNQSSxRQUFTLE1BQ1RSLE1BQU8sWUFHTyxJQUFJUixFQUFRLENBQzFCSSxPQUFRLFlBQ1JPLE1BQU8sRUFDUEMsTUFBTyxFQUNQSSxRQUFTLE1BQ1RSLE1BQU8sWUFHTyxJQUFJUixFQUFRLENBQzFCSSxPQUFRLFlBQ1JPLE1BQU8sRUFDUEMsTUFBTyxFQUNQSSxRQUFTLFVBQ1RSLE1BQU8sWUFHVSxJQUFJUixFQUFRLENBQzdCSSxPQUFRLG9CQUNSTyxNQUFPLEVBQ1BDLE1BQU8sRUFDUEosTUFBTyxVQUNQQyxLQUFNLEdBQ05PLFFBQU8sd0ZBT1csSUFBSWhCLEVBQVEsQ0FDOUJJLE9BQVEscUJBQ1JPLE1BQU8sV0FDUEMsTUFBTyxFQUNQSCxLQUFNLEVBQ05ELE1BQU8sVUFDUFUsS0FBTSxTQXFDUixTQUFTbUcsSUFDUEMsTUFBTUMsaUJBQ04sSUFBTTFDLEVBQU95QyxNQUFNdEksT0FBTytILFFBQVEsS0FDNUJTLEVBQVUsR0FBQUMsT0FBTTVDLEVBQUtjLFFBQVErQixZQUFuQixLQUFBRCxPQUFrQzVDLEVBQUtjLFFBQVFnQyxNQUMvRGpMLFNBQVNzSyxnQkFBZ0JySSxhQUFhLGFBQWM2SSxHQUNwREksUUFBUUMsVUFBVSxDQUFFQyxNQUFPTixHQUFjM0MsRUFBS0csS0FBTUgsRUFBS0csTUFDekQrQyxFQUFTbEQsRUFBS0csTUFnQmhCLFNBQVMrQyxFQUFTdEssR0FDaEIsSUFBTXVLLEVBQU90TCxTQUFTMkQsY0FBYyxvQkFDcEMySCxFQUFLQyxVQUFZLEdBQ2pCRCxFQUFLekosVUFBVUcsSUFBSSx5QkFFbkIsSUFBSXdKLEVBQVUsSUFBSUMsZUFFbEJELEVBQVFFLEtBQUssTUFBTzNLLEdBQUssR0FFekJ5SyxFQUFRbEMsT0FBUyxXQUNmLElBQU1xQyxFQUFZM0wsU0FBU3VJLGNBQWMsT0FFckIsTUFBaEI5RSxLQUFLbUksU0FDUEQsRUFBVUosVUFBWTlILEtBQUtvSSxTQUMzQlAsRUFBS0MsVUFBWUksRUFBVWhJLGNBQWMsb0JBQW9CNEgsVUFDN0RELEVBQUt6SixVQUFVb0IsT0FBTyx5QkFDbEJxSSxFQUFLM0gsY0FBYyxrQkFDckIySCxFQUFLM0gsY0FBYyxpQkFBaUJyRCxpQkFBaUIsUUFBU3FLLEdBR2hFYixFQUFTd0IsRUFBS2pELGlCQUFpQixvQkFJbkNtRCxFQUFRakMsUUFBVSxXQUNoQnVDLGFBQWFQLFVBQVksNkVBRzNCQyxFQUFRTyxPQXpFTi9MLFNBQVMyRCxjQUFjLHNCQUN6QjNELFNBQVMyRCxjQUFjLG9CQUFvQnFJLGFBUHJDdEIsRUFBUyxDQUFDLEtBQU0sS0FBTSxLQUFNLE9BQVEsT0FFckJoRyxLQUFLQyxNQUFNRCxLQUFLdUgsVUFBWXZCLEVBQU9oRSxPQUFTLE1BWS9EMUcsU0FBUzJELGNBQWMsbUJBQ3pCM0QsU0FBUzJELGNBQWMsa0JBQWtCckQsaUJBQWlCLFFBQVMsU0FBQTZCLEdBQ2pFQSxFQUFFMEksaUJBQ0Y3SyxTQUFTMkQsY0FBYyxZQUFZdUksVUFRdkN0RSxJQUVBc0QsUUFBUUMsVUFBVSxDQUFFQyxNQUFPZSxTQUFTQyxTQUFTQyxRQUFRLE1BQU8sS0FBT0YsU0FBU0MsU0FBVUQsU0FBU0MsVUFZM0ZwTSxTQUFTMkQsY0FBYyxrQkFDekIzRCxTQUFTMkQsY0FBYyxpQkFBaUJyRCxpQkFBaUIsUUFBU3FLLEdBR3BFcEssT0FBTytMLFdBQWEsU0FBU25LLEdBQ3ZCQSxFQUFFb0ssUUFDSnZNLFNBQVNzSyxnQkFBZ0JySSxhQUFhLGFBQWNFLEVBQUVvSyxNQUFNbkIsT0FDNURDLEVBQVNjLFNBQVNDLFlBcUN0QnRDLEVBQVM5SixTQUFTcUksaUJBQWlCIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZVxuICAgKi9cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG4gICAgdmFyIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG4gICAgdmFyIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCA9IG51bGw7XG5cbiAgICB2YXIgaW5wdXRUeXBlc1doaXRlbGlzdCA9IHtcbiAgICAgIHRleHQ6IHRydWUsXG4gICAgICBzZWFyY2g6IHRydWUsXG4gICAgICB1cmw6IHRydWUsXG4gICAgICB0ZWw6IHRydWUsXG4gICAgICBlbWFpbDogdHJ1ZSxcbiAgICAgIHBhc3N3b3JkOiB0cnVlLFxuICAgICAgbnVtYmVyOiB0cnVlLFxuICAgICAgZGF0ZTogdHJ1ZSxcbiAgICAgIG1vbnRoOiB0cnVlLFxuICAgICAgd2VlazogdHJ1ZSxcbiAgICAgIHRpbWU6IHRydWUsXG4gICAgICBkYXRldGltZTogdHJ1ZSxcbiAgICAgICdkYXRldGltZS1sb2NhbCc6IHRydWVcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIGZvciBsZWdhY3kgYnJvd3NlcnMgYW5kIGlmcmFtZXMgd2hpY2ggc29tZXRpbWVzIGZvY3VzXG4gICAgICogZWxlbWVudHMgbGlrZSBkb2N1bWVudCwgYm9keSwgYW5kIG5vbi1pbnRlcmFjdGl2ZSBTVkcuXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVmFsaWRGb2N1c1RhcmdldChlbCkge1xuICAgICAgaWYgKFxuICAgICAgICBlbCAmJlxuICAgICAgICBlbCAhPT0gZG9jdW1lbnQgJiZcbiAgICAgICAgZWwubm9kZU5hbWUgIT09ICdIVE1MJyAmJlxuICAgICAgICBlbC5ub2RlTmFtZSAhPT0gJ0JPRFknICYmXG4gICAgICAgICdjbGFzc0xpc3QnIGluIGVsICYmXG4gICAgICAgICdjb250YWlucycgaW4gZWwuY2xhc3NMaXN0XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgd2hldGhlciB0aGUgZ2l2ZW4gZWxlbWVudCBzaG91bGQgYXV0b21hdGljYWxseSB0cmlnZ2VyIHRoZVxuICAgICAqIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBiZWluZyBhZGRlZCwgaS5lLiB3aGV0aGVyIGl0IHNob3VsZCBhbHdheXMgbWF0Y2hcbiAgICAgKiBgOmZvY3VzLXZpc2libGVgIHdoZW4gZm9jdXNlZC5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShlbCkge1xuICAgICAgdmFyIHR5cGUgPSBlbC50eXBlO1xuICAgICAgdmFyIHRhZ05hbWUgPSBlbC50YWdOYW1lO1xuXG4gICAgICBpZiAodGFnTmFtZSA9PSAnSU5QVVQnICYmIGlucHV0VHlwZXNXaGl0ZWxpc3RbdHlwZV0gJiYgIWVsLnJlYWRPbmx5KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFnTmFtZSA9PSAnVEVYVEFSRUEnICYmICFlbC5yZWFkT25seSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gdGhlIGdpdmVuIGVsZW1lbnQgaWYgaXQgd2FzIG5vdCBhZGRlZCBieVxuICAgICAqIHRoZSBhdXRob3IuXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZEZvY3VzVmlzaWJsZUNsYXNzKGVsKSB7XG4gICAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdmb2N1cy12aXNpYmxlJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnZm9jdXMtdmlzaWJsZScpO1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLWZvY3VzLXZpc2libGUtYWRkZWQnLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgZnJvbSB0aGUgZ2l2ZW4gZWxlbWVudCBpZiBpdCB3YXMgbm90XG4gICAgICogb3JpZ2luYWxseSBhZGRlZCBieSB0aGUgYXV0aG9yLlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVGb2N1c1Zpc2libGVDbGFzcyhlbCkge1xuICAgICAgaWYgKCFlbC5oYXNBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMtdmlzaWJsZS1hZGRlZCcpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZvY3VzLXZpc2libGUnKTtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1mb2N1cy12aXNpYmxlLWFkZGVkJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJlYXQgYGtleWRvd25gIGFzIGEgc2lnbmFsIHRoYXQgdGhlIHVzZXIgaXMgaW4ga2V5Ym9hcmQgbW9kYWxpdHkuXG4gICAgICogQXBwbHkgYGZvY3VzLXZpc2libGVgIHRvIGFueSBjdXJyZW50IGFjdGl2ZSBlbGVtZW50IGFuZCBrZWVwIHRyYWNrXG4gICAgICogb2Ygb3VyIGtleWJvYXJkIG1vZGFsaXR5IHN0YXRlIHdpdGggYGhhZEtleWJvYXJkRXZlbnRgLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbktleURvd24oZSkge1xuICAgICAgaWYgKGlzVmFsaWRGb2N1c1RhcmdldChkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICBhZGRGb2N1c1Zpc2libGVDbGFzcyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgYXQgYW55IHBvaW50IGEgdXNlciBjbGlja3Mgd2l0aCBhIHBvaW50aW5nIGRldmljZSwgZW5zdXJlIHRoYXQgd2UgY2hhbmdlXG4gICAgICogdGhlIG1vZGFsaXR5IGF3YXkgZnJvbSBrZXlib2FyZC5cbiAgICAgKiBUaGlzIGF2b2lkcyB0aGUgc2l0dWF0aW9uIHdoZXJlIGEgdXNlciBwcmVzc2VzIGEga2V5IG9uIGFuIGFscmVhZHkgZm9jdXNlZFxuICAgICAqIGVsZW1lbnQsIGFuZCB0aGVuIGNsaWNrcyBvbiBhIGRpZmZlcmVudCBlbGVtZW50LCBmb2N1c2luZyBpdCB3aXRoIGFcbiAgICAgKiBwb2ludGluZyBkZXZpY2UsIHdoaWxlIHdlIHN0aWxsIHRoaW5rIHdlJ3JlIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvblBvaW50ZXJEb3duKGUpIHtcbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPbiBgZm9jdXNgLCBhZGQgdGhlIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byB0aGUgdGFyZ2V0IGlmOlxuICAgICAqIC0gdGhlIHRhcmdldCByZWNlaXZlZCBmb2N1cyBhcyBhIHJlc3VsdCBvZiBrZXlib2FyZCBuYXZpZ2F0aW9uLCBvclxuICAgICAqIC0gdGhlIGV2ZW50IHRhcmdldCBpcyBhbiBlbGVtZW50IHRoYXQgd2lsbCBsaWtlbHkgcmVxdWlyZSBpbnRlcmFjdGlvblxuICAgICAqICAgdmlhIHRoZSBrZXlib2FyZCAoZS5nLiBhIHRleHQgYm94KVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbkZvY3VzKGUpIHtcbiAgICAgIC8vIFByZXZlbnQgSUUgZnJvbSBmb2N1c2luZyB0aGUgZG9jdW1lbnQgb3IgSFRNTCBlbGVtZW50LlxuICAgICAgaWYgKCFpc1ZhbGlkRm9jdXNUYXJnZXQoZS50YXJnZXQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhZEtleWJvYXJkRXZlbnQgfHwgZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkoZS50YXJnZXQpKSB7XG4gICAgICAgIGFkZEZvY3VzVmlzaWJsZUNsYXNzKGUudGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPbiBgYmx1cmAsIHJlbW92ZSB0aGUgYGZvY3VzLXZpc2libGVgIGNsYXNzIGZyb20gdGhlIHRhcmdldC5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25CbHVyKGUpIHtcbiAgICAgIGlmICghaXNWYWxpZEZvY3VzVGFyZ2V0KGUudGFyZ2V0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdmb2N1cy12aXNpYmxlJykgfHxcbiAgICAgICAgZS50YXJnZXQuaGFzQXR0cmlidXRlKCdkYXRhLWZvY3VzLXZpc2libGUtYWRkZWQnKVxuICAgICAgKSB7XG4gICAgICAgIC8vIFRvIGRldGVjdCBhIHRhYi93aW5kb3cgc3dpdGNoLCB3ZSBsb29rIGZvciBhIGJsdXIgZXZlbnQgZm9sbG93ZWRcbiAgICAgICAgLy8gcmFwaWRseSBieSBhIHZpc2liaWxpdHkgY2hhbmdlLlxuICAgICAgICAvLyBJZiB3ZSBkb24ndCBzZWUgYSB2aXNpYmlsaXR5IGNoYW5nZSB3aXRoaW4gMTAwbXMsIGl0J3MgcHJvYmFibHkgYVxuICAgICAgICAvLyByZWd1bGFyIGZvY3VzIGNoYW5nZS5cbiAgICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSB0cnVlO1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCk7XG4gICAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG4gICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQpO1xuICAgICAgICB9LCAxMDApO1xuICAgICAgICByZW1vdmVGb2N1c1Zpc2libGVDbGFzcyhlLnRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIHVzZXIgY2hhbmdlcyB0YWJzLCBrZWVwIHRyYWNrIG9mIHdoZXRoZXIgb3Igbm90IHRoZSBwcmV2aW91c2x5XG4gICAgICogZm9jdXNlZCBlbGVtZW50IGhhZCAuZm9jdXMtdmlzaWJsZS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25WaXNpYmlsaXR5Q2hhbmdlKGUpIHtcbiAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT0gJ2hpZGRlbicpIHtcbiAgICAgICAgLy8gSWYgdGhlIHRhYiBiZWNvbWVzIGFjdGl2ZSBhZ2FpbiwgdGhlIGJyb3dzZXIgd2lsbCBoYW5kbGUgY2FsbGluZyBmb2N1c1xuICAgICAgICAvLyBvbiB0aGUgZWxlbWVudCAoU2FmYXJpIGFjdHVhbGx5IGNhbGxzIGl0IHR3aWNlKS5cbiAgICAgICAgLy8gSWYgdGhpcyB0YWIgY2hhbmdlIGNhdXNlZCBhIGJsdXIgb24gYW4gZWxlbWVudCB3aXRoIGZvY3VzLXZpc2libGUsXG4gICAgICAgIC8vIHJlLWFwcGx5IHRoZSBjbGFzcyB3aGVuIHRoZSB1c2VyIHN3aXRjaGVzIGJhY2sgdG8gdGhlIHRhYi5cbiAgICAgICAgaWYgKGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5KSB7XG4gICAgICAgICAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYWRkSW5pdGlhbFBvaW50ZXJNb3ZlTGlzdGVuZXJzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgZ3JvdXAgb2YgbGlzdGVuZXJzIHRvIGRldGVjdCB1c2FnZSBvZiBhbnkgcG9pbnRpbmcgZGV2aWNlcy5cbiAgICAgKiBUaGVzZSBsaXN0ZW5lcnMgd2lsbCBiZSBhZGRlZCB3aGVuIHRoZSBwb2x5ZmlsbCBmaXJzdCBsb2FkcywgYW5kIGFueXRpbWVcbiAgICAgKiB0aGUgd2luZG93IGlzIGJsdXJyZWQsIHNvIHRoYXQgdGhleSBhcmUgYWN0aXZlIHdoZW4gdGhlIHdpbmRvdyByZWdhaW5zXG4gICAgICogZm9jdXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkSW5pdGlhbFBvaW50ZXJNb3ZlTGlzdGVuZXJzKCkge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlSW5pdGlhbFBvaW50ZXJNb3ZlTGlzdGVuZXJzKCkge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgcG9sZnlpbGwgZmlyc3QgbG9hZHMsIGFzc3VtZSB0aGUgdXNlciBpcyBpbiBrZXlib2FyZCBtb2RhbGl0eS5cbiAgICAgKiBJZiBhbnkgZXZlbnQgaXMgcmVjZWl2ZWQgZnJvbSBhIHBvaW50aW5nIGRldmljZSAoZS5nLiBtb3VzZSwgcG9pbnRlcixcbiAgICAgKiB0b3VjaCksIHR1cm4gb2ZmIGtleWJvYXJkIG1vZGFsaXR5LlxuICAgICAqIFRoaXMgYWNjb3VudHMgZm9yIHNpdHVhdGlvbnMgd2hlcmUgZm9jdXMgZW50ZXJzIHRoZSBwYWdlIGZyb20gdGhlIFVSTCBiYXIuXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKGUpIHtcbiAgICAgIC8vIFdvcmsgYXJvdW5kIGEgU2FmYXJpIHF1aXJrIHRoYXQgZmlyZXMgYSBtb3VzZW1vdmUgb24gPGh0bWw+IHdoZW5ldmVyIHRoZVxuICAgICAgLy8gd2luZG93IGJsdXJzLCBldmVuIGlmIHlvdSdyZSB0YWJiaW5nIG91dCBvZiB0aGUgcGFnZS4gwq9cXF8o44OEKV8vwq9cbiAgICAgIGlmIChlLnRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaHRtbCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gZmFsc2U7XG4gICAgICByZW1vdmVJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25LZXlEb3duLCB0cnVlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvblBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uUG9pbnRlckRvd24sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIG9uRm9jdXMsIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBvbkJsdXIsIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBvblZpc2liaWxpdHlDaGFuZ2UsIHRydWUpO1xuICAgIGFkZEluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycygpO1xuXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdqcy1mb2N1cy12aXNpYmxlJyk7XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaXB0aW9uIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgZnVuY3Rpb24gb25ET01SZWFkeShjYWxsYmFjaykge1xuICAgIHZhciBsb2FkZWQ7XG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayB3cmFwcGVyIGZvciBjaGVjayBsb2FkZWQgc3RhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb2FkKCkge1xuICAgICAgaWYgKCFsb2FkZWQpIHtcbiAgICAgICAgbG9hZGVkID0gdHJ1ZTtcblxuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChbJ2ludGVyYWN0aXZlJywgJ2NvbXBsZXRlJ10uaW5kZXhPZihkb2N1bWVudC5yZWFkeVN0YXRlKSA+PSAwKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2FkZWQgPSBmYWxzZTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBsb2FkLCBmYWxzZSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGxvYWQsIGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIG9uRE9NUmVhZHkoaW5pdCk7XG4gIH1cblxufSkpKTtcbiIsImNsYXNzIFNxdWFyZXMge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb25zLmNhbnZhcyk7XG5cbiAgICBpZiAoIXRoaXMuY2FudmFzKSByZXR1cm47XG5cbiAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIHRoaXMuY29sb3IgPSdyZWQnO1xuXG4gICAgdGhpcy5zaXplID0gdGhpcy5wcm9wX3NldChvcHRpb25zLnNpemUsIDIwKTtcblxuICAgIHRoaXMubnVtX3ggPSBvcHRpb25zLm51bV94O1xuICAgIHRoaXMubnVtX3kgPSBvcHRpb25zLm51bV95O1xuXG4gICAgdGhpcy5pbml0X2NhbnZhcygpO1xuICB9XG5cbiAgaW5pdF9jYW52YXMoKSB7XG4gICAgdGhpcy5wcmVwYXJlX2NhbnZhcygpO1xuICAgIHRoaXMuYXR0YWNoX2V2ZW50cygpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wYXR0ZXJuKSB7XG4gICAgICB0aGlzLnBhcnNlX3BhdHRlcm4oKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmZpbGwpIHtcbiAgICAgIGNvbnN0IG51bV9ib3hlcyA9IE1hdGgucm91bmQodGhpcy5nZXRfcGFyZW50X3dpZHRoKCkgLyB0aGlzLnNpemUgLyAyKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1fYm94ZXM7IGkrKykge1xuICAgICAgICB0aGlzLnNxdWFyZXMucHVzaCh7IHg6IHRoaXMuc2l6ZSAqICgyICogaSksIHk6IDAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZHJhd19zcXVhcmVzKCk7XG4gICAgfVxuICB9XG5cbiAgYXR0YWNoX2V2ZW50cygpIHtcbiAgICB0aGlzLnBsYWNlX3NxdWFyZSA9IHRoaXMucGxhY2Vfc3F1YXJlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBsYWNlX3NxdWFyZSk7XG4gIH1cblxuICBwbGFjZV9zcXVhcmUoZSkge1xuICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG5cbiAgICAgIGNvbnN0IHhfcmF3ID0gZS5wYWdlWCAtIGUudGFyZ2V0Lm9mZnNldExlZnQ7XG4gICAgICBjb25zdCB5X3JhdyA9IGUucGFnZVkgLSBlLnRhcmdldC5vZmZzZXRUb3A7XG5cbiAgICAgIGxldCB4ID0geF9yYXcgLSB4X3JhdyAlIHRoaXMuc2l6ZTtcbiAgICAgIGxldCB5ID0geV9yYXcgLSB5X3JhdyAlIHRoaXMuc2l6ZTtcblxuICAgICAgaWYgKHkgPT09IHRoaXMuY2FudmFzLmhlaWdodCkge1xuICAgICAgICB5IC09IHRoaXMuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmICh4ID09PSB0aGlzLmNhbnZhcy53aWR0aCkge1xuICAgICAgICB4IC09IHRoaXMuc2l6ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnNxdWFyZXMuZmluZEluZGV4KHBvcyA9PiBwb3MueCA9PT0geCAmIHBvcy55ID09PSB5KTtcblxuICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgdGhpcy5zcXVhcmVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNxdWFyZXMucHVzaCh7IHg6IHgsIHk6IHl9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5kcmF3X3NxdWFyZXModGhpcy5jb250ZXh0LCB0aGlzLnNxdWFyZXMpO1xuICB9XG5cbiAgcHJvcF9zZXQocHJvcCwgdmFsdWUpIHtcbiAgICByZXR1cm4gcHJvcCA/IHByb3AgOiB2YWx1ZTtcbiAgfVxuXG4gIHByZXBhcmVfY2FudmFzKCkge1xuICAgIHRoaXMuY2FudmFzLmNsYXNzTGlzdC5hZGQoJ3NxdWFyZS1jYW52YXMtLXZpc2libGUnKVxuXG4gICAgdGhpcy5jYW52YXMud2lkdGggPSB0aGlzLm51bV94ICogdGhpcy5zaXplO1xuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMubnVtX3kgKiB0aGlzLnNpemU7XG5cbiAgICBpZiAodGhpcy5udW1feCA9PT0gJ2luZmluaXRlJykgeyAgXG4gICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMuZ2V0X3BhcmVudF93aWR0aCgpO1xuICAgIH1cblxuICAgIHRoaXMuc3F1YXJlcyA9IFtdO1xuICB9XG5cbiAgZ2V0X3BhcmVudF93aWR0aCgpIHtcbiAgICBjb25zdCBwYXJlbnRfc3R5bGVzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmNhbnZhcy5wYXJlbnROb2RlKTtcbiAgICBsZXQgcGFyZW50X3dpZHRoID0gdGhpcy5jYW52YXMucGFyZW50Tm9kZS5jbGllbnRXaWR0aDtcbiAgICBwYXJlbnRfd2lkdGggLT0gcGFyc2VGbG9hdChwYXJlbnRfc3R5bGVzLnBhZGRpbmdMZWZ0KSArIHBhcnNlRmxvYXQocGFyZW50X3N0eWxlcy5wYWRkaW5nUmlnaHQpO1xuXG4gICAgcmV0dXJuIHBhcmVudF93aWR0aDtcbiAgfVxuXG4gIHBhcnNlX3BhdHRlcm4oKSB7XG4gICAgY29uc3QgcGF0dGVybiA9IHRoaXMub3B0aW9ucy5wYXR0ZXJuLnNwbGl0KCcsJyk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdHRlcm4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGJveCA9IHBhcnNlSW50KHBhdHRlcm5baV0udHJpbSgpKTtcbiAgICAgIGxldCByb3cgPSBNYXRoLmZsb29yKGkgLyB0aGlzLm51bV94KTtcbiAgICAgIGxldCBjb2wgPSAoaSArIHRoaXMubnVtX3gpICUgdGhpcy5udW1feDtcblxuICAgICAgaWYgKHRoaXMubnVtX3ggPT09ICdpbmZpbml0ZScpIHtcbiAgICAgICAgcm93ID0gMDtcbiAgICAgICAgY29sID0gaTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJveCkge1xuICAgICAgICB0aGlzLnNxdWFyZXMucHVzaCh7IHg6IHRoaXMuc2l6ZSAqIGNvbCwgeTogdGhpcy5zaXplICogcm93IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZHJhd19zcXVhcmVzKCk7XG4gIH1cblxuICBkcmF3X3NxdWFyZXMoKSB7XG4gICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMucHJvcF9zZXQodGhpcy5vcHRpb25zLmNvbG9yLCAncmdiYSg1MSwgNTEsIDUxLCAwLjkpJyk7XG5cbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5zcXVhcmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzcXVhcmUgPSB0aGlzLnNxdWFyZXNbaV07XG4gICAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3Qoc3F1YXJlLngsIHNxdWFyZS55LCB0aGlzLnNpemUsIHRoaXMuc2l6ZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNxdWFyZXM7XG5cblxuIiwiY29uc3QgcmVxdWVzdElkbGVDYWxsYmFjayA9IHJlcXVlc3RJZGxlQ2FsbGJhY2sgfHxcbiAgZnVuY3Rpb24gKGNiKSB7XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGNiKHtcbiAgICAgICAgZGlkVGltZW91dDogZmFsc2UsXG4gICAgICAgIHRpbWVSZW1haW5pbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgNTAgLSAoRGF0ZS5ub3coKSAtIHN0YXJ0KSk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9LCAxKTtcbiAgfTtcblxuZXhwb3J0IGRlZmF1bHQgcmVxdWVzdElkbGVDYWxsYmFjaztcbiIsIi8qKlxuICogSW5zcGlyZWQgYnkgcXVpY2tsaW5rLlxuICogaHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNocm9tZUxhYnMvcXVpY2tsaW5rXG4gKi9cbiBcbmltcG9ydCByZXF1ZXN0SWRsZUNhbGxiYWNrIGZyb20gJy4vcmVxdWVzdC1pZGxlLWNhbGxiYWNrLmpzJztcblxuZnVuY3Rpb24gY3JlYXRlUHJlZmV0Y2hMaW5rKHVybCkge1xuICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuXG4gIC8vIElmIHByZWZldGNoIHN1cHBvcnRlZCAgICBcbiAgaWYgKChsaW5rLnJlbExpc3QgfHwge30pLnN1cHBvcnRzICYmICFsaW5rLnJlbExpc3Quc3VwcG9ydHMoJ3ByZWZldGNoJykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsaW5rLnJlbCA9ICdwcmVmZXRjaCc7XG4gIGxpbmsuaHJlZiA9IHVybDtcblxuICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmspO1xufVxuXG5mdW5jdGlvbiBnZXRMaW5rcygpIHtcbiAgLy8gR2V0IGFsbCBsaW5rcyBpbiBtYWluIG5hdlxuICBjb25zdCBsaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1uYXYtbWFpbiBhJyk7XG5cbiAgZm9yKGxldCBpID0gMDsgaSA8IGxpbmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgY3JlYXRlUHJlZmV0Y2hMaW5rKGxpbmtzW2ldLmhyZWYpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByZWZldGNoTmF2KCkge1xuICAvLyBkb24ndCBwcmVmZXRjaCBpZiAyZyBjb25uZWN0aW9uIG9yIGRhdGEtc2F2ZXIgZW5hYmxlZFxuICBpZiAobmF2aWdhdG9yLmNvbm5lY3Rpb24gJiYgbmF2aWdhdG9yLmNvbm5lY3Rpb24uc2F2ZURhdGEpIHtcbiAgICBpZiAobmF2aWdhdG9yLmNvbm5lY3Rpb24uZWZmZWN0aXZlVHlwZS5pbmNsdWRlcygnMmcnKSB8fCBuYXZpZ2F0b3IuY29ubmVjdGlvbi5zYXZlRGF0YSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gc3RhcnQgYXMgc29vbiBhcyB0aGUgYnJvd3NlciBpc24ndCBidXN5IGFueW1vcmVcbiAgcmVxdWVzdElkbGVDYWxsYmFjaygoKSA9PiB7XG4gICAgZ2V0TGlua3MoKTtcbiAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgcHJlZmV0Y2hOYXY7XG4iLCJsZXQgb2JzZXJ2ZXI7XG5cbmZ1bmN0aW9uIGxvYWRJbWFnZShpbWFnZSkge1xuICBjb25zdCBzcmMgPSBpbWFnZS5kYXRhc2V0LnNyYztcbiAgcmV0dXJuIGZldGNoSW1hZ2Uoc3JjKS50aGVuKCgpID0+IHsgXG4gICAgaW1hZ2UuY2xhc3NMaXN0LmFkZCgnbGF6eWxvYWRlZCcpO1xuICAgIGltYWdlLnNyYyA9IHNyYztcbiAgICBpbWFnZS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXNyY1wiKTtcbiAgIH0pO1xufVxuXG5mdW5jdGlvbiBmZXRjaEltYWdlKHVybCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgaW1hZ2Uuc3JjID0gdXJsO1xuICAgIGltYWdlLm9ubG9hZCA9IHJlc29sdmU7XG4gICAgaW1hZ2Uub25lcnJvciA9IHJlamVjdDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGltYWdlVmlzaWJsZShlbnRyaWVzKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykgeyBcbiAgICBsZXQgZW50cnkgPSBlbnRyaWVzW2ldO1xuICAgIGlmIChlbnRyeS5pbnRlcnNlY3Rpb25SYXRpbyA+IDApIHtcbiAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpO1xuICAgICAgbG9hZEltYWdlKGVudHJ5LnRhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGxhenlMb2FkKGltYWdlcykge1xuICBpZiAoaW1hZ2VzLmxlbmd0aCkge1xuICAgIG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGltYWdlVmlzaWJsZSwgeyByb290TWFyZ2luOiAnMTAwcHggMHB4JywgfSk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGltYWdlcy5sZW5ndGg7IGkrKykgeyBcbiAgICAgIGxldCBpbWFnZSA9IGltYWdlc1tpXTtcbiAgICAgIGlmIChpbWFnZS5jbGFzc0xpc3QuY29udGFpbnMoJ2xhenlsb2FkZWQnKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShpbWFnZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxhenlMb2FkO1xuIiwiaW1wb3J0IFNxdWFyZXMgZnJvbSAnLi9zcXVhcmVzJztcbmltcG9ydCBwcmVmZXRjaE5hdiBmcm9tICcuL3ByZWZldGNoLW5hdic7XG5pbXBvcnQgbGF6eUxvYWQgZnJvbSAnLi9sYXp5bG9hZCc7XG5yZXF1aXJlKCdmb2N1cy12aXNpYmxlJyk7XG5cbmlmICghRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCkge1xuICBFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0ID0gZnVuY3Rpb24ocykge1xuICAgIHZhciBlbCA9IHRoaXM7XG4gICAgaWYgKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMoZWwpKSByZXR1cm4gbnVsbDtcbiAgICBkbyB7XG4gICAgICBpZiAoZWwubWF0Y2hlcyhzKSkgcmV0dXJuIGVsO1xuICAgICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50IHx8IGVsLnBhcmVudE5vZGU7XG4gICAgfSB3aGlsZSAoZWwgIT09IG51bGwgJiYgZWwubm9kZVR5cGUgPT09IDEpO1xuICAgIHJldHVybiBudWxsO1xuICB9O1xufVxuXG5jb25zdCBob21lX3RsID0gbmV3IFNxdWFyZXMoe1xuICBjYW52YXM6ICcuanMtc3EtdGwnLFxuICBudW1feDogMSxcbiAgbnVtX3k6IDEsXG4gIHBhdHRlcm46ICcxJyxcbiAgY29sb3I6ICcjMzZCMUJGJ1xufSk7XG5cbmNvbnN0IGhvbWVfdHIgPSBuZXcgU3F1YXJlcyh7XG4gIGNhbnZhczogJy5qcy1zcS10cicsXG4gIG51bV94OiAyLFxuICBudW1feTogMSxcbiAgcGF0dGVybjogJzEsMScsXG4gIGNvbG9yOiAnIzM2QjFCRidcbn0pO1xuXG5jb25zdCBob21lX2JyID0gbmV3IFNxdWFyZXMoe1xuICBjYW52YXM6ICcuanMtc3EtYnInLFxuICBudW1feDogMSxcbiAgbnVtX3k6IDIsXG4gIHBhdHRlcm46ICcxLDEnLFxuICBjb2xvcjogJyNGMjNDNTAnXG59KTtcblxuY29uc3QgaG9tZV9ibCA9IG5ldyBTcXVhcmVzKHtcbiAgY2FudmFzOiAnLmpzLXNxLWJsJyxcbiAgbnVtX3g6IDIsXG4gIG51bV95OiAyLFxuICBwYXR0ZXJuOiAnMSwwLDEsMScsXG4gIGNvbG9yOiAnI0YyM0M1MCdcbn0pO1xuXG5jb25zdCBob21lX2ludHJvID0gbmV3IFNxdWFyZXMoe1xuICBjYW52YXM6ICcuanMtc3EtaG9tZS1pbnRybycsXG4gIG51bV94OiA2LFxuICBudW1feTogNSxcbiAgY29sb3I6ICcjNTY4YjhlJyxcbiAgc2l6ZTogMTAsXG4gIHBhdHRlcm46IGAwLDAsMSwxLDAsMSxcbiAgICAwLDEsMSwwLDAsMSxcbiAgICAxLDEsMCwwLDAsMSxcbiAgICAwLDEsMSwwLDAsMCxcbiAgICAwLDAsMSwxLDAsMWBcbn0pO1xuXG5jb25zdCBzaXRlX2hlYWRlciA9IG5ldyBTcXVhcmVzKHtcbiAgY2FudmFzOiAnLmpzLXNxLXNpdGUtaGVhZGVyJyxcbiAgbnVtX3g6ICdpbmZpbml0ZScsXG4gIG51bV95OiAxLFxuICBzaXplOiA1LFxuICBjb2xvcjogJyMxZDRlNmQnLFxuICBmaWxsOiAnZXZlbidcbn0pO1xuXG4vKipcbiAqIFJhbmRvbSBlbW9qaVxuICovXG5cbmZ1bmN0aW9uIGdldFJhbmRvbUVtb2ppKCkge1xuICBjb25zdCBlbW9qaXMgPSBbJ/CfpKQnLCAn8J+QsycsICfwn427JywgJ/CfkYrwn4+7JywgJ/CfjbMnXTtcblxuICBjb25zdCBlbW9qaSA9IGVtb2ppc1tNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAoZW1vamlzLmxlbmd0aCAtIDEpKV07XG4gIHJldHVybiBlbW9qaTtcbn1cblxuaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1yYW5kb20tZW1vamknKSkge1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtcmFuZG9tLWVtb2ppJykudGV4dENvbnRlbnQgPSBnZXRSYW5kb21FbW9qaSgpO1xufVxuXG4vKipcbiAqIFNtb290aGx5IHNjcm9sbCB0byB0b3BcbiAqL1xuXG5pZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXNjcm9sbC10b3AnKSkge1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtc2Nyb2xsLXRvcCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1sb2dvJykuZm9jdXMoKTtcbiAgfSk7XG59XG5cbi8qKlxuICogUHJlZmV0Y2ggbGlua3MgaW4gbmF2IGZvciBiZXR0ZXIgcGVyY2VpdmVkIHBlcmZvcm1hbmNlXG4gKi9cblxucHJlZmV0Y2hOYXYoKTtcblxuaGlzdG9yeS5wdXNoU3RhdGUoeyB0aGVtZTogbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvL2csICcnKSB9LCBsb2NhdGlvbi5wYXRobmFtZSwgbG9jYXRpb24ucGF0aG5hbWUpO1xuXG5mdW5jdGlvbiBsaW5rUG9zdGxpc3QoKSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGNvbnN0IGxpbmsgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnYScpO1xuICBjb25zdCB0aGVtZUNsYXNzID0gYCR7bGluay5kYXRhc2V0LnB1YmxpY2F0aW9ufS0ke2xpbmsuZGF0YXNldC5wb3N0fWA7XG4gIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGhlbWUnLCB0aGVtZUNsYXNzKTtcbiAgaGlzdG9yeS5wdXNoU3RhdGUoeyB0aGVtZTogdGhlbWVDbGFzcyB9LCBsaW5rLmhyZWYsIGxpbmsuaHJlZik7XG4gIGxvYWRQYWdlKGxpbmsuaHJlZik7XG59XG5cblxuaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1wb3N0LWxpc3QnKSkge1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtcG9zdC1saXN0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBsaW5rUG9zdGxpc3QpO1xufVxuXG53aW5kb3cub25wb3BzdGF0ZSA9IGZ1bmN0aW9uKGUpIHtcbiAgaWYgKGUuc3RhdGUpIHtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRoZW1lJywgZS5zdGF0ZS50aGVtZSk7XG4gICAgbG9hZFBhZ2UobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9XG59O1xuXG5cbmZ1bmN0aW9uIGxvYWRQYWdlKHVybCkge1xuICBjb25zdCBtYWluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXNpdGUtY29udGVudCcpO1xuICBtYWluLmlubmVySFRNTCA9ICcnO1xuICBtYWluLmNsYXNzTGlzdC5hZGQoJ3NpdGVfX2NvbnRlbnQtLWhpZGRlbicpO1xuXG4gIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgcmVxdWVzdC5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuXG4gIHJlcXVlc3Qub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICBpZiAodGhpcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IHRoaXMucmVzcG9uc2U7XG4gICAgICBtYWluLmlubmVySFRNTCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuanMtc2l0ZS1jb250ZW50JykuaW5uZXJIVE1MO1xuICAgICAgbWFpbi5jbGFzc0xpc3QucmVtb3ZlKCdzaXRlX19jb250ZW50LS1oaWRkZW4nKTtcbiAgICAgIGlmIChtYWluLnF1ZXJ5U2VsZWN0b3IoJy5qcy1wb3N0LWxpc3QnKSkge1xuICAgICAgICBtYWluLnF1ZXJ5U2VsZWN0b3IoJy5qcy1wb3N0LWxpc3QnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGxpbmtQb3N0bGlzdCk7XG4gICAgICB9XG5cbiAgICAgIGxhenlMb2FkKG1haW4ucXVlcnlTZWxlY3RvckFsbChcImltZ1tkYXRhLXNyY11cIikpO1xuICAgIH1cbiAgfTtcblxuICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICBwYWdlX2NvbnRlbnQuaW5uZXJIVE1MID0gJ0ZvciBzb21lIHJlYXNvbiBJIGNvdWxkblxcJ3QgY29ubmVjdCB0byB0aGUgc2VydmVyLCBwbGVhc2UgdHJ5IGxhdGVyIGFnYWluLic7XG4gIH07XG5cbiAgcmVxdWVzdC5zZW5kKCk7XG59XG5cbi8vIExhenkgbG9hZCBpbWFnZXNcbmxhenlMb2FkKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbWdbZGF0YS1zcmNdXCIpKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=